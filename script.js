// Áé∞‰ª£Âåñ ZenInk Êô∫ËÉΩÁôªÂàÜÁ≥ªÁªü - 2024ÁâàÊú¨
// ÂÖ®Â±ÄÂèòÈáè
let currentExam = null;
let studentsData = [];
let questionCount = 0;
let isLoading = false;
let autosaveTimer = null;

// Áé∞‰ª£ÂåñÈ°µÈù¢ÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', function () {
    console.log('üéì ZenInk Êô∫ËÉΩÁôªÂàÜÁ≥ªÁªüÂêØÂä®‰∏≠...');

    // ÊòæÁ§∫ÂêØÂä®Âä®Áîª
    showLoadingOverlay();

    // Ê®°ÊãüÁ≥ªÁªüÂàùÂßãÂåñ
    setTimeout(() => {
        // Âä†ËΩΩ‰øùÂ≠òÁöÑÈÖçÁΩÆ
        loadSavedData();

        // ÈªòËÆ§ÊòæÁ§∫ËØïÂç∑ÈÖçÁΩÆÈ°µÈù¢
        showSection('exam-config');

        // Ê∑ªÂä†ÈªòËÆ§È¢òÁõÆ
        if (questionCount === 0) {
            addQuestion();
        }

        // ÂàùÂßãÂåñUIÂ¢ûÂº∫ÊïàÊûú
        initializeUIEnhancements();

        // ÂàùÂßãÂåñÁé∞‰ª£ÂåñÂäüËÉΩ
        initializeModernFeatures();

        // ÈöêËóèÂä†ËΩΩÂä®Áîª
        hideLoadingOverlay();

        console.log('‚úÖ Á≥ªÁªüÂàùÂßãÂåñÂÆåÊàê');
    }, 1200);
});

// Áé∞‰ª£Âåñ UI Â¢ûÂº∫ÂäüËÉΩ
function initializeUIEnhancements() {
    // Ê∑ªÂä†È°µÈù¢Âä†ËΩΩÂä®Áîª
    document.body.classList.add('fade-in');

    // ‰∏∫ÊâÄÊúâÊåâÈíÆÊ∑ªÂä†Áé∞‰ª£ÂåñÁÇπÂáªÊïàÊûú
    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('btn')) {
            addModernClickEffect(e.target);
        }
    });

    // ‰∏∫Ë°®ÂçïËæìÂÖ•Ê∑ªÂä†Áé∞‰ª£ÂåñÁÑ¶ÁÇπÊïàÊûú
    const inputs = document.querySelectorAll('.form-control, .form-select');
    inputs.forEach(input => {
        input.addEventListener('focus', function () {
            this.parentElement.classList.add('input-focused');
            addInputFocusEffect(this);
        });

        input.addEventListener('blur', function () {
            this.parentElement.classList.remove('input-focused');
        });

        // Ê∑ªÂä†ËæìÂÖ•È™åËØÅËßÜËßâÂèçÈ¶à
        input.addEventListener('input', function () {
            validateInput(this);
        });
    });

    // ÂàùÂßãÂåñËøõÂ∫¶Êù°Âä®Áîª
    updateConfigProgress();

    // ÂàùÂßãÂåñÂØºËà™Ê†èÊªöÂä®ÊïàÊûú
    initializeNavbarEffects();

    // ÂàùÂßãÂåñÂç°ÁâáÊÇ¨ÊµÆÊïàÊûú
    initializeCardEffects();
}

// Áé∞‰ª£ÂåñÂäüËÉΩÂàùÂßãÂåñ
function initializeModernFeatures() {
    // ÂàùÂßãÂåñËá™Âä®‰øùÂ≠ò
    initializeAutoSave();

    // ÂàùÂßãÂåñÂø´Êç∑ÈîÆ
    initializeKeyboardShortcuts();

    // ÂàùÂßãÂåñÈÄöÁü•Á≥ªÁªü
    initializeNotificationSystem();

    // ÂàùÂßãÂåñ‰∏ªÈ¢òÊ£ÄÊµã
    initializeThemeDetection();

    // ÂàùÂßãÂåñÊÄßËÉΩÁõëÊéß
    initializePerformanceMonitoring();
}

// Áé∞‰ª£ÂåñÊåâÈíÆÁÇπÂáªÊïàÊûú
function addModernClickEffect(button) {
    button.style.transform = 'scale(0.95)';
    button.classList.add('loading');

    setTimeout(() => {
        button.style.transform = '';
        button.classList.remove('loading');
    }, 200);

    // Ê∑ªÂä†Ê∂üÊº™ÊïàÊûú
    const ripple = document.createElement('div');
    ripple.className = 'ripple-effect';
    ripple.style.cssText = `
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.6);
        transform: scale(0);
        animation: ripple 0.6s linear;
        pointer-events: none;
    `;

    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.height, rect.width);
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = (rect.width / 2 - size / 2) + 'px';
    ripple.style.top = (rect.height / 2 - size / 2) + 'px';

    button.style.position = 'relative';
    button.style.overflow = 'hidden';
    button.appendChild(ripple);

    setTimeout(() => {
        ripple.remove();
    }, 600);
}

// ËæìÂÖ•ÁÑ¶ÁÇπÂ¢ûÂº∫ÊïàÊûú
function addInputFocusEffect(input) {
    input.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
    input.style.transform = 'translateY(-2px) scale(1.01)';

    setTimeout(() => {
        input.style.transform = '';
    }, 300);
}

// ËæìÂÖ•È™åËØÅËßÜËßâÂèçÈ¶à
function validateInput(input) {
    const value = input.value.trim();

    if (input.required && !value) {
        input.classList.add('is-invalid');
        input.classList.remove('is-valid');
    } else if (value) {
        input.classList.add('is-valid');
        input.classList.remove('is-invalid');
    } else {
        input.classList.remove('is-invalid', 'is-valid');
    }

    // Ëß¶ÂèëËøõÂ∫¶Êõ¥Êñ∞
    updateConfigProgress();
}

// ÂØºËà™Ê†èÊªöÂä®ÊïàÊûú
function initializeNavbarEffects() {
    let lastScrollY = window.scrollY;

    window.addEventListener('scroll', () => {
        const navbar = document.querySelector('.navbar');
        const currentScrollY = window.scrollY;

        if (currentScrollY > 50) {
            navbar.classList.add('scrolled');
        } else {
            navbar.classList.remove('scrolled');
        }

        // Ê∑ªÂä†ÊªöÂä®ÊñπÂêëÊ£ÄÊµã
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
            navbar.style.transform = 'translateY(-100%)';
        } else {
            navbar.style.transform = 'translateY(0)';
        }

        lastScrollY = currentScrollY;
    });
}

// Âç°ÁâáÊÇ¨ÊµÆÊïàÊûúÂàùÂßãÂåñ
function initializeCardEffects() {
    const cards = document.querySelectorAll('.card');

    cards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.style.willChange = 'transform';
        });

        card.addEventListener('mouseleave', () => {
            card.style.willChange = 'auto';
        });
    });
}

// Âä†ËΩΩË¶ÜÁõñÂ±ÇÊòæÁ§∫/ÈöêËóè
function showLoadingOverlay(message = 'Âä†ËΩΩ‰∏≠...') {
    let overlay = document.getElementById('loading-overlay');

    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'loading-overlay';
        overlay.className = 'loading-overlay';
        overlay.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <p class="loading-message mt-3">${message}</p>
            </div>
        `;
        document.body.appendChild(overlay);
    }

    overlay.classList.add('show');
    document.body.style.overflow = 'hidden';
}

function hideLoadingOverlay() {
    // ÈöêËóèÈ°µÈù¢Âä†ËΩΩÂô®
    const pageLoader = document.getElementById('page-loader');
    if (pageLoader) {
        pageLoader.classList.add('hidden');
        document.body.style.overflow = '';
    }

    // ÂÖºÂÆπÊóßÁöÑÂä†ËΩΩÈÅÆÁΩ©
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        overlay.classList.remove('show');
        document.body.style.overflow = '';
    }
}

// Ëá™Âä®‰øùÂ≠òÂäüËÉΩ
function initializeAutoSave() {
    const form = document.getElementById('exam-form');
    if (form) {
        form.addEventListener('input', () => {
            clearTimeout(autosaveTimer);
            autosaveTimer = setTimeout(() => {
                autoSaveConfig();
            }, 2000);
        });
    }
}

function autoSaveConfig() {
    try {
        const formData = collectFormData();
        localStorage.setItem('autosave_config', JSON.stringify({
            ...formData,
            timestamp: new Date().toISOString()
        }));

        showNotification('ÈÖçÁΩÆÂ∑≤Ëá™Âä®‰øùÂ≠ò', 'success', 2000);
    } catch (error) {
        console.warn('Ëá™Âä®‰øùÂ≠òÂ§±Ë¥•:', error);
    }
}

// Âø´Êç∑ÈîÆÁ≥ªÁªü
function initializeKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + S: ‰øùÂ≠òÈÖçÁΩÆ
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
            e.preventDefault();
            saveExamConfig();
        }

        // Ctrl/Cmd + N: Ê∑ªÂä†È¢òÁõÆ
        if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
            e.preventDefault();
            addQuestion();
        }

        // Ctrl/Cmd + E: ÂØºÂá∫Excel
        if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
            e.preventDefault();
            exportToExcel();
        }

        // ESC: ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal.show');
            modals.forEach(modal => {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) bsModal.hide();
            });
        }
    });
}

// ÈÄöÁü•Á≥ªÁªü
function initializeNotificationSystem() {
    // ÂàõÂª∫ÈÄöÁü•ÂÆπÂô®
    if (!document.getElementById('notification-container')) {
        const container = document.createElement('div');
        container.id = 'notification-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
        `;
        document.body.appendChild(container);
    }
}

function showNotification(message, type = 'info', duration = 4000) {
    const container = document.getElementById('notification-container');
    if (!container) return;

    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show notification-item`;
    notification.style.cssText = `
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border: none;
        border-radius: 8px;
        animation: slideInRight 0.3s ease-out;
    `;

    notification.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas fa-${getNotificationIcon(type)} me-2"></i>
            <span>${message}</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;

    container.appendChild(notification);

    if (duration > 0) {
        setTimeout(() => {
            notification.classList.add('fade');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, duration);
    }
}

function getNotificationIcon(type) {
    const icons = {
        success: 'check-circle',
        danger: 'exclamation-triangle',
        warning: 'exclamation-circle',
        info: 'info-circle',
        primary: 'bell'
    };
    return icons[type] || 'info-circle';
}

// ‰∏ªÈ¢òÊ£ÄÊµã
function initializeThemeDetection() {
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');

    function handleThemeChange(e) {
        document.body.classList.toggle('dark-theme', e.matches);
        showNotification(`Â∑≤ÂàáÊç¢Âà∞${e.matches ? 'Ê∑±Ëâ≤' : 'ÊµÖËâ≤'}‰∏ªÈ¢ò`, 'info', 2000);
    }

    prefersDark.addEventListener('change', handleThemeChange);
    handleThemeChange(prefersDark);
}

// ÊÄßËÉΩÁõëÊéß
function initializePerformanceMonitoring() {
    if ('performance' in window) {
        window.addEventListener('load', () => {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            console.log(`üìä È°µÈù¢Âä†ËΩΩÊó∂Èó¥: ${loadTime}ms`);

            if (loadTime > 3000) {
                console.warn('‚ö†Ô∏è È°µÈù¢Âä†ËΩΩËæÉÊÖ¢ÔºåÂª∫ËÆÆ‰ºòÂåñ');
            }
        });
    }
}

// Ë°®ÂçïÊï∞ÊçÆÊî∂ÈõÜ
function collectFormData() {
    return {
        subject: document.getElementById('subject')?.value || '',
        examName: document.getElementById('exam-name')?.value || '',
        totalScore: document.getElementById('total-score')?.value || '',
        className: document.getElementById('class-name')?.value || '',
        questions: collectQuestionData()
    };
}

function collectQuestionData() {
    const questionCards = document.querySelectorAll('.question-card');
    return Array.from(questionCards).map(card => {
        return {
            type: card.querySelector('.question-type')?.value || '',
            count: parseInt(card.querySelector('.question-count')?.value) || 1,
            score: parseFloat(card.querySelector('.question-score')?.value) || 0,
            desc: card.querySelector('.question-desc')?.value || ''
        };
    });
}

// Êõ¥Êñ∞ÈÖçÁΩÆËøõÂ∫¶
function updateConfigProgress() {
    const form = document.getElementById('exam-form');
    const totalFields = form.querySelectorAll('input, select').length;
    const filledFields = Array.from(form.querySelectorAll('input, select'))
        .filter(field => field.value.trim() !== '').length;

    const progress = totalFields > 0 ? Math.round((filledFields / totalFields) * 100) : 0;

    const progressBar = document.getElementById('config-progress-bar');
    const progressBadge = document.getElementById('config-progress');

    if (progressBar && progressBadge) {
        progressBar.style.width = `${progress}%`;
        progressBadge.textContent = `${progress}%`;

        // Ê†πÊçÆËøõÂ∫¶ÊîπÂèòÈ¢úËâ≤
        if (progress < 30) {
            progressBadge.className = 'badge bg-danger';
        } else if (progress < 70) {
            progressBadge.className = 'badge bg-warning';
        } else {
            progressBadge.className = 'badge bg-success';
        }
    }
}

// ÊòæÁ§∫ÊåáÂÆöÂå∫Âüü
function showSection(sectionName) {
    // ÈöêËóèÊâÄÊúâÂå∫Âüü
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => {
        section.classList.remove('active');
        section.style.opacity = '0';
        section.style.transform = 'translateY(20px)';
    });

    // ÊòæÁ§∫ÊåáÂÆöÂå∫ÂüüÔºàÂ∏¶Âä®ÁîªÊïàÊûúÔºâ
    setTimeout(() => {
        const targetSection = document.getElementById(sectionName);
        targetSection.classList.add('active');
        targetSection.style.opacity = '1';
        targetSection.style.transform = 'translateY(0)';
    }, 150);

    // Êõ¥Êñ∞ÂØºËà™Ê†è
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => link.classList.remove('active'));

    // ÊâæÂà∞ÂØπÂ∫îÁöÑÂØºËà™ÈìæÊé•
    const activeLink = Array.from(navLinks).find(link =>
        link.getAttribute('onclick')?.includes(sectionName)
    );
    if (activeLink) {
        activeLink.classList.add('active');
    }

    // Ê†πÊçÆÂå∫ÂüüÊâßË°åÁõ∏Â∫îÂàùÂßãÂåñ
    setTimeout(() => {
        switch (sectionName) {
            case 'exam-config':
                // Á°Æ‰øùÊ®°ÊùøÂ∑≤Âä†ËΩΩÂà∞ÁºñËæëË°®Âçï
                if (currentExam && currentExam.questions) {
                    loadExamToEditForm();
                }
                updateConfigProgress();
                break;
            case 'scoring':
                initScoringSection();
                break;
            case 'statistics':
                updateStatistics();
                break;
        }
    }, 200);
}

// Ê∑ªÂä†È¢òÁõÆ
function addQuestion() {
    questionCount++;
    const container = document.getElementById('questions-container');

    const questionCard = document.createElement('div');
    questionCard.className = 'question-card modern-card fade-in';
    questionCard.setAttribute('data-question-id', questionCount);
    questionCard.innerHTML = `
        <div class="question-header" onclick="toggleQuestionCard(this)">
            <div class="d-flex align-items-center">
                <div class="question-number" aria-label="È¢òÂè∑">${questionCount}</div>
                <div class="question-title">
                    <span class="fw-bold">Á¨¨${questionCount}È¢ò</span>
                    <small class="question-summary text-muted"></small>
                </div>
                <div class="question-toggle-icon ms-auto">
                    <i class="fas fa-chevron-down"></i>
                </div>
            </div>
            <div class="question-actions">
                <button class="btn btn-sm btn-outline-secondary" onclick="duplicateQuestion(this, event)" title="Â§çÂà∂È¢òÁõÆ">
                    <i class="fas fa-copy"></i>
                </button>
                <button class="btn btn-sm btn-outline-danger" onclick="removeQuestion(this, event)" title="Âà†Èô§È¢òÁõÆ">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        
        <div class="question-content">
            <div class="row">
                <div class="col-lg-6">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">È¢òÁõÆÁ±ªÂûã</label>
                            <select class="form-control question-type" onchange="updateQuestionType(this)">
                                <option value="choice">ÈÄâÊã©È¢ò</option>
                                <option value="multiple">Â§öÈÄâÈ¢ò</option>
                                <option value="blank">Â°´Á©∫È¢ò</option>
                                <option value="short">ÁÆÄÁ≠îÈ¢ò</option>
                                <option value="essay">Â§ßÈ¢ò/‰ΩúÊñá</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">È¢òÁõÆÊï∞Èáè</label>
                            <input type="number" class="form-control question-count" value="1" min="1" max="50" onchange="updateQuestionPreview(this)">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">ÊØèÈ¢òÂàÜÊï∞</label>
                            <input type="number" class="form-control question-score" value="5" min="0.5" step="0.5" onchange="updateQuestionPreview(this)">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">È¢òÁõÆËµ∑ÂßãÂ∫èÂè∑</label>
                            <input type="number" class="form-control question-start" value="1" min="1" onchange="updateQuestionPreview(this)">
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">È¢òÁõÆÊèèËø∞ÔºàÂèØÈÄâÔºâ</label>
                        <input type="text" class="form-control question-desc" placeholder="‰æãÔºöÂçïÈÄâÈ¢ò„ÄÅÂ§öÈÄâÈ¢òÁ≠â" onchange="updateQuestionPreview(this)">
                    </div>
                </div>
                
                <div class="col-lg-6">
                    <!-- ÈÄâÊã©È¢òÁâπÊÆäÈÖçÁΩÆ -->
                    <div class="choice-config" style="display: block;">
                        <div class="mb-3">
                            <label class="form-label">ÈÄâÈ°πËÆæÁΩÆ</label>
                            <div class="choice-options">
                                <div class="row mb-2">
                                    <div class="col-md-6">
                                        <label class="form-label small">ÈÄâÈ°πÊï∞Èáè</label>
                                        <select class="form-control form-control-sm choice-count" onchange="updateChoiceOptions(this)">
                                            <option value="2">A-B (2‰∏™ÈÄâÈ°π)</option>
                                            <option value="3">A-C (3‰∏™ÈÄâÈ°π)</option>
                                            <option value="4" selected>A-D (4‰∏™ÈÄâÈ°π)</option>
                                            <option value="5">A-E (5‰∏™ÈÄâÈ°π)</option>
                                            <option value="6">A-F (6‰∏™ÈÄâÈ°π)</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label small">ËØÑÂàÜÊñπÂºè</label>
                                        <select class="form-control form-control-sm choice-scoring">
                                            <option value="all">ÂÖ®ÂØπÊâçÂæóÂàÜ</option>
                                            <option value="partial">ÈÉ®ÂàÜÂàÜÊï∞</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="choice-answers">
                                    <label class="form-label small">Á≠îÊ°àËÆæÁΩÆ (ÈÄâÊã©È¢òÊâπÈáèËÆæÁΩÆ)</label>
                                    <div class="answer-pattern-buttons mb-2">
                                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setAnswerPattern(this, 'A')">ÂÖ®ÈÄâA</button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setAnswerPattern(this, 'B')">ÂÖ®ÈÄâB</button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setAnswerPattern(this, 'C')">ÂÖ®ÈÄâC</button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setAnswerPattern(this, 'D')">ÂÖ®ÈÄâD</button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="setAnswerPattern(this, 'random')">ÈöèÊú∫</button>
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="showAnswerDetail(this)">ËØ¶ÁªÜËÆæÁΩÆ</button>
                                    </div>
                                    <div class="answer-preview">
                                        <small class="text-muted">Á≠îÊ°àÈ¢ÑËßàÔºöA A A A A...</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- È¢òÁõÆÁªüËÆ°‰ø°ÊÅØ -->
                    <div class="question-stats">
                        <div class="stats-card">
                            <div class="stats-item">
                                <span class="stats-label">ÊÄªÈ¢òÊï∞</span>
                                <span class="stats-value question-total-count">1</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Â∞èËÆ°ÂàÜÊï∞</span>
                                <span class="stats-value question-total-score">5ÂàÜ</span>
                            </div>
                            <div class="stats-item">
                                <span class="stats-label">Âπ≥ÂùáÂàÜ</span>
                                <span class="stats-value question-avg-score">5ÂàÜ</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    // Ê∑ªÂä†ÊäòÂè†Âä®Áîª
    questionCard.style.opacity = '0';
    questionCard.style.transform = 'translateY(-20px)';
    container.appendChild(questionCard);

    // Ëß¶ÂèëÂä®Áîª
    setTimeout(() => {
        questionCard.style.transition = 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
        questionCard.style.opacity = '1';
        questionCard.style.transform = 'translateY(0)';
    }, 10);

    updateQuestionPreview(questionCard);
    updatePreview();
}

// Âà†Èô§È¢òÁõÆ
function removeQuestion(button, event) {
    if (event) event.stopPropagation();

    if (confirm('Á°ÆÂÆöÂà†Èô§Ëøô‰∏™È¢òÁõÆÂêóÔºü')) {
        const questionCard = button.closest('.question-card');

        // Ê∑ªÂä†Âà†Èô§Âä®Áîª
        questionCard.style.transition = 'all 0.3s ease';
        questionCard.style.opacity = '0';
        questionCard.style.transform = 'translateX(-100%)';

        setTimeout(() => {
            questionCard.remove();
            renumberQuestions();
            updatePreview();
        }, 300);
    }
}

// Â§çÂà∂È¢òÁõÆ
function duplicateQuestion(button, event) {
    if (event) event.stopPropagation();

    const questionCard = button.closest('.question-card');
    const newQuestionCard = questionCard.cloneNode(true);

    // Êõ¥Êñ∞Êñ∞È¢òÁõÆÁöÑÁºñÂè∑
    questionCount++;
    newQuestionCard.setAttribute('data-question-id', questionCount);

    // Êõ¥Êñ∞È¢òÁõÆÁºñÂè∑ÊòæÁ§∫
    const questionNumber = newQuestionCard.querySelector('.question-number');
    const questionTitle = newQuestionCard.querySelector('.question-title span');
    questionNumber.textContent = questionCount;
    questionTitle.textContent = `Á¨¨${questionCount}È¢ò`;

    // ÊèíÂÖ•Âà∞ÂΩìÂâçÈ¢òÁõÆÂêéÈù¢
    questionCard.insertAdjacentElement('afterend', newQuestionCard);

    // Ê∑ªÂä†Âá∫Áé∞Âä®Áîª
    newQuestionCard.style.opacity = '0';
    newQuestionCard.style.transform = 'scale(0.8)';
    setTimeout(() => {
        newQuestionCard.style.transition = 'all 0.3s ease';
        newQuestionCard.style.opacity = '1';
        newQuestionCard.style.transform = 'scale(1)';
    }, 10);

    renumberQuestions();
    updatePreview();
    showNotification('È¢òÁõÆÂ∑≤Â§çÂà∂', 'success');
}

// ÊäòÂè†/Â±ïÂºÄÈ¢òÁõÆÂç°Áâá
function toggleQuestionCard(header) {
    const questionCard = header.closest('.question-card');
    const content = questionCard.querySelector('.question-content');
    const icon = header.querySelector('.question-toggle-icon i');

    if (questionCard.classList.contains('collapsed')) {
        // Â±ïÂºÄ
        questionCard.classList.remove('collapsed');
        content.style.maxHeight = content.scrollHeight + 'px';
        icon.style.transform = 'rotate(0deg)';
        content.style.opacity = '1';
    } else {
        // ÊäòÂè†
        questionCard.classList.add('collapsed');
        content.style.maxHeight = '0';
        icon.style.transform = 'rotate(-90deg)';
        content.style.opacity = '0';
    }
}

// Êõ¥Êñ∞È¢òÁõÆÁ±ªÂûãÈÖçÁΩÆ
function updateQuestionType(select) {
    const questionCard = select.closest('.question-card');
    const choiceConfig = questionCard.querySelector('.choice-config');
    const type = select.value;

    // ÊòæÁ§∫/ÈöêËóèÈÄâÊã©È¢òÁâπÊÆäÈÖçÁΩÆ
    if (type === 'choice' || type === 'multiple') {
        choiceConfig.style.display = 'block';

        // Êõ¥Êñ∞ËØÑÂàÜÊñπÂºè
        const scoringSelect = questionCard.querySelector('.choice-scoring');
        if (type === 'multiple') {
            scoringSelect.innerHTML = `
                <option value="all">ÂÖ®ÂØπÊâçÂæóÂàÜ</option>
                <option value="partial">ÈÉ®ÂàÜÂàÜÊï∞</option>
                <option value="each">ÊØèÈÄâÂØπ‰∏ÄÈ°πÂæóÂàÜ</option>
            `;
        } else {
            scoringSelect.innerHTML = `
                <option value="all">ÂÖ®ÂØπÊâçÂæóÂàÜ</option>
                <option value="partial">ÈÉ®ÂàÜÂàÜÊï∞</option>
            `;
        }
    } else {
        choiceConfig.style.display = 'none';
    }

    updateQuestionPreview(questionCard);
}

// Êõ¥Êñ∞ÈÄâÊã©È¢òÈÄâÈ°π
function updateChoiceOptions(select) {
    const questionCard = select.closest('.question-card');
    const count = parseInt(select.value);
    const answerPreview = questionCard.querySelector('.answer-preview small');

    // Êõ¥Êñ∞Á≠îÊ°àÈ¢ÑËßà
    const letters = ['A', 'B', 'C', 'D', 'E', 'F'];
    const availableOptions = letters.slice(0, count).join('„ÄÅ');
    answerPreview.textContent = `ÂèØÁî®ÈÄâÈ°πÔºö${availableOptions}`;

    updateQuestionPreview(questionCard);
}

// ËÆæÁΩÆÁ≠îÊ°àÊ®°Âºè
function setAnswerPattern(button, pattern) {
    const questionCard = button.closest('.question-card');
    const countInput = questionCard.querySelector('.question-count');
    const answerPreview = questionCard.querySelector('.answer-preview small');
    const questionCount = parseInt(countInput.value);

    let answers = [];

    if (pattern === 'random') {
        const options = ['A', 'B', 'C', 'D'];
        for (let i = 0; i < questionCount; i++) {
            answers.push(options[Math.floor(Math.random() * options.length)]);
        }
    } else {
        answers = new Array(questionCount).fill(pattern);
    }

    // Â≠òÂÇ®Á≠îÊ°àÊï∞ÊçÆ
    questionCard.setAttribute('data-answers', JSON.stringify(answers));

    // Êõ¥Êñ∞È¢ÑËßà
    const preview = answers.slice(0, 10).join(' ') + (answers.length > 10 ? '...' : '');
    answerPreview.textContent = `Á≠îÊ°àÈ¢ÑËßàÔºö${preview}`;

    showNotification(`Â∑≤ËÆæÁΩÆ${questionCount}È¢òÁ≠îÊ°à‰∏∫Ôºö${pattern === 'random' ? 'ÈöèÊú∫' : 'ÂÖ®' + pattern}`, 'success');
}

// ÊòæÁ§∫ËØ¶ÁªÜÁ≠îÊ°àËÆæÁΩÆ
function showAnswerDetail(button) {
    const questionCard = button.closest('.question-card');
    const questionCount = parseInt(questionCard.querySelector('.question-count').value);

    // ÂàõÂª∫ËØ¶ÁªÜËÆæÁΩÆÊ®°ÊÄÅÊ°Ü
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content modern-modal">
                <div class="modal-header gradient-header">
                    <h5 class="modal-title">
                        <i class="fas fa-list me-2"></i>ËØ¶ÁªÜÁ≠îÊ°àËÆæÁΩÆ
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="answer-grid">
                        ${generateAnswerGrid(questionCount)}
                    </div>
                    <div class="mt-3">
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="fillAllAnswers('A')">ÂÖ®Â°´A</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="fillAllAnswers('B')">ÂÖ®Â°´B</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="fillAllAnswers('C')">ÂÖ®Â°´C</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="fillAllAnswers('D')">ÂÖ®Â°´D</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="randomizeAllAnswers()">ÈöèÊú∫Â°´ÂÖÖ</button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ÂèñÊ∂à</button>
                    <button type="button" class="btn btn-primary" onclick="saveDetailedAnswers()">‰øùÂ≠òÁ≠îÊ°à</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();

    // Ê®°ÊÄÅÊ°ÜÂÖ≥Èó≠Êó∂Âà†Èô§ÂÖÉÁ¥†
    modal.addEventListener('hidden.bs.modal', () => {
        modal.remove();
    });

    // Â≠òÂÇ®ÂΩìÂâçÈ¢òÁõÆÂç°ÁâáÂºïÁî®
    modal.setAttribute('data-question-card', questionCard.getAttribute('data-question-id'));
}

// ÁîüÊàêÁ≠îÊ°àÁΩëÊ†º
function generateAnswerGrid(count) {
    let html = '<div class="row">';
    for (let i = 1; i <= count; i++) {
        html += `
            <div class="col-md-2 col-sm-3 col-4 mb-2">
                <label class="form-label small">${i}È¢ò</label>
                <select class="form-control form-control-sm answer-select" data-question="${i}">
                    <option value="A">A</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="D">D</option>
                </select>
            </div>
        `;

        if (i % 6 === 0 && i < count) {
            html += '</div><div class="row">';
        }
    }
    html += '</div>';
    return html;
}

// Êõ¥Êñ∞È¢òÁõÆÈ¢ÑËßà
function updateQuestionPreview(element) {
    const questionCard = typeof element === 'string' ?
        document.querySelector(`[data-question-id="${element}"]`) :
        (element.closest ? element.closest('.question-card') : element);

    if (!questionCard) return;

    const type = questionCard.querySelector('.question-type').value;
    const count = parseInt(questionCard.querySelector('.question-count').value) || 1;
    const score = parseFloat(questionCard.querySelector('.question-score').value) || 0;
    const desc = questionCard.querySelector('.question-desc').value.trim();
    const start = parseInt(questionCard.querySelector('.question-start').value) || 1;

    // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
    const totalScore = count * score;
    questionCard.querySelector('.question-total-count').textContent = count;
    questionCard.querySelector('.question-total-score').textContent = totalScore + 'ÂàÜ';
    questionCard.querySelector('.question-avg-score').textContent = score + 'ÂàÜ';

    // Êõ¥Êñ∞È¢òÁõÆÊëòË¶Å
    const typeNames = {
        'choice': 'ÈÄâÊã©È¢ò',
        'multiple': 'Â§öÈÄâÈ¢ò',
        'blank': 'Â°´Á©∫È¢ò',
        'short': 'ÁÆÄÁ≠îÈ¢ò',
        'essay': 'Â§ßÈ¢ò/‰ΩúÊñá'
    };

    const summary = questionCard.querySelector('.question-summary');
    const summaryText = `${typeNames[type]} ${count}È¢ò √ó ${score}ÂàÜ = ${totalScore}ÂàÜ${desc ? ' (' + desc + ')' : ''}`;
    summary.textContent = summaryText;

    updatePreview();
}

// ÈáçÊñ∞ÁºñÂè∑È¢òÁõÆ
function renumberQuestions() {
    const questions = document.querySelectorAll('.question-card');
    questionCount = 0;

    questions.forEach((question, index) => {
        questionCount = index + 1;
        const numberSpan = question.querySelector('.question-number');
        const titleSpan = question.querySelector('.fw-bold');

        numberSpan.textContent = questionCount;
        titleSpan.textContent = `Á¨¨${questionCount}È¢ò`;
    });
}

// Êõ¥Êñ∞È¢ÑËßà
function updatePreview() {
    const preview = document.getElementById('exam-preview');
    const questions = document.querySelectorAll('.question-card');

    if (questions.length === 0) {
        preview.innerHTML = '<p class="text-muted">ËØ∑Ê∑ªÂä†È¢òÁõÆ</p>';
        return;
    }

    let totalScore = 0;
    let previewHTML = '<div class="exam-structure">';

    questions.forEach((question, index) => {
        const type = question.querySelector('.question-type').value;
        const count = parseInt(question.querySelector('.question-count').value) || 1;
        const score = parseFloat(question.querySelector('.question-score').value) || 0;
        const desc = question.querySelector('.question-desc').value;

        const subtotal = count * score;
        totalScore += subtotal;

        // Êõ¥Êñ∞Â∞èËÆ°ÊòæÁ§∫
        const totalBadge = question.querySelector('.question-total');
        totalBadge.textContent = `Â∞èËÆ°Ôºö${subtotal}ÂàÜ`;

        const typeNames = {
            'choice': 'ÈÄâÊã©È¢ò',
            'blank': 'Â°´Á©∫È¢ò',
            'short': 'ÁÆÄÁ≠îÈ¢ò',
            'essay': 'Â§ßÈ¢ò/‰ΩúÊñá'
        };

        previewHTML += `
            <div class="mb-2 p-2 bg-light rounded">
                <strong>Á¨¨${index + 1}È¢ò</strong>
                <span class="badge bg-primary ms-2">${typeNames[type]}</span>
                ${desc ? `<span class="text-muted ms-1">(${desc})</span>` : ''}
                <div class="small text-muted">
                    ${count}È¢ò √ó ${score}ÂàÜ = ${subtotal}ÂàÜ
                </div>
            </div>
        `;
    });

    previewHTML += `
        </div>
        <hr>
        <div class="text-end">
            <strong class="text-primary fs-5">ÊÄªÂàÜÔºö${totalScore}ÂàÜ</strong>
        </div>
    `;

    preview.innerHTML = previewHTML;

    // Êõ¥Êñ∞ÊÄªÂàÜËæìÂÖ•Ê°Ü
    document.getElementById('total-score').value = totalScore;
}

// ‰øùÂ≠òËØïÂç∑ÈÖçÁΩÆ
function saveExamConfig() {
    const subject = document.getElementById('subject').value.trim();
    const examName = document.getElementById('exam-name').value.trim();
    const totalScore = parseFloat(document.getElementById('total-score').value) || 0;
    const className = document.getElementById('class-name').value.trim();

    if (!subject || !examName || !className) {
        alert('ËØ∑Â°´ÂÜôÂÆåÊï¥ÁöÑËÄÉËØï‰ø°ÊÅØÔºÅ');
        return;
    }

    const questions = [];
    const questionCards = document.querySelectorAll('.question-card');

    if (questionCards.length === 0) {
        alert('ËØ∑Ëá≥Â∞ëÊ∑ªÂä†‰∏Ä‰∏™È¢òÁõÆÔºÅ');
        return;
    }

    let calculatedTotal = 0;
    questionCards.forEach((card, index) => {
        const type = card.querySelector('.question-type').value;
        const count = parseInt(card.querySelector('.question-count').value) || 1;
        const score = parseFloat(card.querySelector('.question-score').value) || 0;
        const desc = card.querySelector('.question-desc').value;

        calculatedTotal += count * score;

        questions.push({
            id: index + 1,
            type: type,
            count: count,
            score: score,
            description: desc,
            total: count * score
        });
    });

    currentExam = {
        subject: subject,
        examName: examName,
        className: className,
        totalScore: totalScore,
        calculatedTotal: calculatedTotal,
        questions: questions,
        createdAt: new Date().toISOString()
    };

    // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
    localStorage.setItem('currentExam', JSON.stringify(currentExam));

    // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
    showAlert('ËØïÂç∑ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ', 'success');

    // ËØ¢ÈóÆÊòØÂê¶Ë∑≥ËΩ¨Âà∞ÁôªÂàÜÁïåÈù¢
    setTimeout(() => {
        if (confirm('ËØïÂç∑ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÔºÅ\nÊòØÂê¶Á´ãÂç≥Ë∑≥ËΩ¨Âà∞ÁôªÂàÜÁïåÈù¢ÂºÄÂßãÈòÖÂç∑Ôºü')) {
            showSection('scoring');
        }
    }, 1000);

    // ÂàùÂßãÂåñÁôªÂàÜÂå∫Âüü
    initScoringSection();
}

// Âä†ËΩΩÂø´ÈÄüÊ®°Êùø
function loadQuickTemplate(templateType) {
    // Ê∑ªÂä†Âä†ËΩΩÂä®Áîª
    const container = document.getElementById('questions-container');
    container.innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Âä†ËΩΩ‰∏≠...</span></div><p class="mt-2">Ê≠£Âú®Âä†ËΩΩ' + getTemplateName(templateType) + 'Ê®°Êùø...</p></div>';

    const templates = {
        'math': [
            { type: 'choice', count: 12, score: 5, desc: 'ÂçïÈÄâÈ¢ò' },
            { type: 'blank', count: 4, score: 5, desc: 'Â°´Á©∫È¢ò' },
            { type: 'short', count: 6, score: 10, desc: 'Ëß£Á≠îÈ¢ò' }
        ],
        'chinese': [
            { type: 'choice', count: 15, score: 3, desc: 'Âü∫Á°ÄÁü•ËØÜ' },
            { type: 'short', count: 4, score: 8, desc: 'ÈòÖËØªÁêÜËß£' },
            { type: 'essay', count: 1, score: 37, desc: '‰ΩúÊñá' }
        ],
        'english': [
            { type: 'choice', count: 15, score: 2, desc: 'Âê¨ÂäõÈÄâÊã©' },
            { type: 'choice', count: 20, score: 2.5, desc: 'ËØ≠Ë®ÄÁü•ËØÜËøêÁî®' },
            { type: 'essay', count: 1, score: 20, desc: '‰π¶Èù¢Ë°®Ëææ' }
        ],
        'science': [
            { type: 'choice', count: 14, score: 4, desc: 'ÈÄâÊã©È¢ò' },
            { type: 'short', count: 2, score: 9, desc: 'ÂÆûÈ™åÈ¢ò' },
            { type: 'short', count: 4, score: 11, desc: 'ËÆ°ÁÆóÈ¢ò' }
        ]
    };

    const template = templates[templateType];
    if (template) {
        setTimeout(() => {
            // Ê∏ÖÁ©∫Áé∞ÊúâÈ¢òÁõÆ
            container.innerHTML = '';
            questionCount = 0;

            template.forEach(item => {
                addQuestion();
                const lastCard = document.querySelector('.question-card:last-child');
                lastCard.querySelector('.question-type').value = item.type;
                lastCard.querySelector('.question-count').value = item.count;
                lastCard.querySelector('.question-score').value = item.score;
                lastCard.querySelector('.question-desc').value = item.desc;
            });

            // Ëá™Âä®Â°´ÂÖÖÂ≠¶Áßë‰ø°ÊÅØ
            document.getElementById('subject').value = getTemplateName(templateType);

            updatePreview();
            updateConfigProgress();

            // Ëá™Âä®‰øùÂ≠òÈÖçÁΩÆ
            saveExamConfig();

            showAlert(getTemplateName(templateType) + 'Ê®°ÊùøÂä†ËΩΩÊàêÂäüÔºÅÈÖçÁΩÆÂ∑≤Ëá™Âä®‰øùÂ≠ò', 'success');
        }, 600);
    }
}

// Ëé∑ÂèñÊ®°ÊùøÂêçÁß∞
function getTemplateName(templateType) {
    const names = {
        'math': 'Êï∞Â≠¶',
        'chinese': 'ËØ≠Êñá',
        'english': 'Ëã±ËØ≠',
        'science': 'ÁêÜÁªº'
    };
    return names[templateType] || templateType;
}

// ÂàùÂßãÂåñÁôªÂàÜÂå∫Âüü
function initScoringSection() {
    if (!currentExam) {
        document.getElementById('current-exam-info').innerHTML =
            '<div class="alert alert-warning">ËØ∑ÂÖàÈÖçÁΩÆËØïÂç∑ÁªìÊûÑ</div>';
        document.getElementById('scoring-form').innerHTML = '';
        return;
    }

    // ÊòæÁ§∫ËÄÉËØï‰ø°ÊÅØ
    document.getElementById('current-exam-info').innerHTML = `
        <div class="exam-info">
            <h6><i class="fas fa-book"></i> ${currentExam.subject || 'Êú™ËÆæÁΩÆÁßëÁõÆ'}</h6>
            <p class="mb-1">${currentExam.examName || 'Êú™ËÆæÁΩÆËÄÉËØïÂêçÁß∞'}</p>
            <p class="mb-1">${currentExam.className || 'Êú™ËÆæÁΩÆÁè≠Á∫ß'}</p>
            <p class="mb-1">ÊÄªÂàÜÔºö${currentExam.totalScore || 0}ÂàÜ</p>
            <small class="text-muted">ÂÖ±${currentExam.questions?.length || 0}Â§ßÈ¢ò</small>
        </div>
    `;

    // ÁîüÊàêÁôªÂàÜË°®Âçï
    generateScoringForm();

    // Êõ¥Êñ∞Â≠¶ÁîüÂàóË°®
    updateStudentsList();
}

// ÁîüÊàêÁôªÂàÜË°®Âçï
function generateScoringForm() {
    const container = document.getElementById('scoring-form');
    let formHTML = '<div class="scoring-questions">';

    currentExam.questions.forEach((question, qIndex) => {
        const typeNames = {
            'choice': 'ÈÄâÊã©È¢ò',
            'blank': 'Â°´Á©∫È¢ò',
            'short': 'ÁÆÄÁ≠îÈ¢ò',
            'essay': 'Â§ßÈ¢ò/‰ΩúÊñá'
        };

        formHTML += `
            <div class="score-group" data-question-type="${question.type}">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0">
                        <span class="badge bg-secondary me-2">${question.id}</span>
                        ${typeNames[question.type]}
                        ${question.description ? `(${question.description})` : ''}
                    </h6>
                    <div class="d-flex align-items-center">
                        <span class="text-muted small me-2">Êª°ÂàÜ ${question.total}ÂàÜ</span>
                        ${generateQuickButtons(question, qIndex)}
                    </div>
                </div>
        `;

        // Ê†πÊçÆÈ¢òÁõÆÁ±ªÂûãÁîüÊàê‰∏çÂêåÁöÑËØÑÂàÜÁïåÈù¢
        if (question.type === 'choice') {
            // ÈÄâÊã©È¢òÔºöÊèê‰æõÊª°ÂàÜ/0ÂàÜÊåâÈíÆ
            formHTML += generateChoiceScoring(question, qIndex);
        } else if (question.type === 'short' || question.type === 'essay') {
            // ÁÆÄÁ≠îÈ¢ò/Â§ßÈ¢òÔºöÊîØÊåÅÁªÜÂåñËµãÂàÜ
            formHTML += generateDetailedScoring(question, qIndex);
        } else {
            // Â°´Á©∫È¢òÔºöÊôÆÈÄöËæìÂÖ•Ê°Ü
            formHTML += generateNormalScoring(question, qIndex);
        }

        formHTML += `</div>`;
    });

    formHTML += '</div>';
    container.innerHTML = formHTML;
}

// ÁîüÊàêÂø´Êç∑ÊåâÈíÆ
function generateQuickButtons(question, qIndex) {
    if (question.type === 'choice') {
        return `
            <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-success" onclick="setChoiceScore(${qIndex}, 'full')">
                    <i class="fas fa-check"></i> ÂÖ®ÂØπ
                </button>
                <button type="button" class="btn btn-outline-danger" onclick="setChoiceScore(${qIndex}, 'zero')">
                    <i class="fas fa-times"></i> ÂÖ®Èîô
                </button>
            </div>
        `;
    } else if (question.type === 'short' || question.type === 'essay') {
        return `
            <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-success" onclick="setDetailedScore(${qIndex}, 'full')">
                    <i class="fas fa-star"></i> Êª°ÂàÜ
                </button>
                <button type="button" class="btn btn-outline-warning" onclick="setDetailedScore(${qIndex}, 'good')">
                    <i class="fas fa-star-half-alt"></i> ËâØÂ•Ω
                </button>
                <button type="button" class="btn btn-outline-danger" onclick="setDetailedScore(${qIndex}, 'zero')">
                    <i class="fas fa-times"></i> Èõ∂ÂàÜ
                </button>
            </div>
        `;
    } else {
        return `
            <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-success" onclick="setNormalScore(${qIndex}, 'full')">
                    <i class="fas fa-check"></i> Êª°ÂàÜ
                </button>
                <button type="button" class="btn btn-outline-danger" onclick="setNormalScore(${qIndex}, 'zero')">
                    <i class="fas fa-times"></i> Èõ∂ÂàÜ
                </button>
            </div>
        `;
    }
}

// ÈÄâÊã©È¢òËØÑÂàÜÁïåÈù¢
function generateChoiceScoring(question, qIndex) {
    const collapseId = `choice-collapse-${qIndex}`;
    let html = `<div class="choice-scoring">`;

    // Â¶ÇÊûúÈÄâÊã©È¢òÊï∞ÈáèÂ§ß‰∫é5ÔºåÊ∑ªÂä†ÊäòÂè†ÂäüËÉΩ
    if (question.count > 5) {
        html += `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="text-muted small">${question.count}ÈÅìÈÄâÊã©È¢ò</span>
                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" 
                        data-bs-target="#${collapseId}" aria-expanded="false">
                    <i class="fas fa-eye"></i> Â±ïÂºÄËØ¶ÊÉÖ
                </button>
            </div>
            <div class="collapse" id="${collapseId}">
        `;
    }

    // ÊåâÈíÆÂºèÈÄâÊã©È¢òËØÑÂàÜ
    for (let i = 0; i < question.count; i++) {
        const subQuestionId = `q${qIndex}_${i}`;
        html += `
            <div class="choice-item mb-2">
                <div class="d-flex justify-content-between align-items-center">
                    <label class="form-label mb-0 fw-medium">${question.count > 1 ? `Á¨¨${i + 1}È¢ò` : 'ÂæóÂàÜ'}:</label>
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="${subQuestionId}" id="${subQuestionId}_correct" 
                               value="${question.score}" onchange="calculateTotal(); updateChoiceProgress(${qIndex})">
                        <label class="btn btn-outline-success btn-sm" for="${subQuestionId}_correct">
                            <i class="fas fa-check me-1"></i>ÂØπ(${question.score}ÂàÜ)
                        </label>
                        
                        <input type="radio" class="btn-check" name="${subQuestionId}" id="${subQuestionId}_wrong" 
                               value="0" onchange="calculateTotal(); updateChoiceProgress(${qIndex})">
                        <label class="btn btn-outline-danger btn-sm" for="${subQuestionId}_wrong">
                            <i class="fas fa-times me-1"></i>Èîô(0ÂàÜ)
                        </label>
                    </div>
                </div>
                <input type="hidden" class="score-input" id="${subQuestionId}" value="0">
            </div>
        `;
    }

    // ÂÖ≥Èó≠ÊäòÂè†ÂÆπÂô®
    if (question.count > 5) {
        html += `</div>`;

        // Ê∑ªÂä†ËøõÂ∫¶ÊåáÁ§∫Âô®
        html += `
            <div class="choice-progress mt-2">
                <div class="d-flex justify-content-between align-items-center mb-1">
                    <small class="text-muted">Á≠îÈ¢òËøõÂ∫¶</small>
                    <small class="text-muted" id="choice-progress-text-${qIndex}">0/${question.count}</small>
                </div>
                <div class="progress" style="height: 4px;">
                    <div class="progress-bar" id="choice-progress-bar-${qIndex}" style="width: 0%"></div>
                </div>
            </div>
        `;
    }

    html += '</div>';
    return html;
}

// Êõ¥Êñ∞ÈÄâÊã©È¢òÁ≠îÈ¢òËøõÂ∫¶
function updateChoiceProgress(qIndex) {
    const question = currentExam.questions[qIndex];
    if (!question || question.type !== 'choice') return;

    let answeredCount = 0;
    for (let i = 0; i < question.count; i++) {
        const subQuestionId = `q${qIndex}_${i}`;
        const correctRadio = document.getElementById(`${subQuestionId}_correct`);
        const wrongRadio = document.getElementById(`${subQuestionId}_wrong`);

        if (correctRadio?.checked || wrongRadio?.checked) {
            answeredCount++;
        }
    }

    const progressText = document.getElementById(`choice-progress-text-${qIndex}`);
    const progressBar = document.getElementById(`choice-progress-bar-${qIndex}`);

    if (progressText && progressBar) {
        const percentage = (answeredCount / question.count * 100);
        progressText.textContent = `${answeredCount}/${question.count}`;
        progressBar.style.width = `${percentage}%`;

        // Ê†πÊçÆÂÆåÊàêÂ∫¶Êõ¥ÊîπËøõÂ∫¶Êù°È¢úËâ≤
        if (percentage === 100) {
            progressBar.className = 'progress-bar bg-success';
        } else if (percentage > 50) {
            progressBar.className = 'progress-bar bg-info';
        } else {
            progressBar.className = 'progress-bar bg-warning';
        }
    }
}

// ÁÆÄÁ≠îÈ¢òËØ¶ÁªÜËØÑÂàÜÁïåÈù¢  
function generateDetailedScoring(question, qIndex) {
    let html = '<div class="detailed-scoring">';

    if (question.count === 1) {
        // Âçï‰∏™Â§ßÈ¢òÔºåÊîØÊåÅÂàÜÊ≠•È™§ËµãÂàÜ
        html += `
            <div class="detailed-item">
                <div class="row">
                    <div class="col-md-8">
                        <div class="score-breakdown">
                            <div class="mb-2">
                                <label class="form-label small">ÂàÜÊ≠•ËØÑÂàÜÔºö</label>
                                <div class="row g-2" id="breakdown_q${qIndex}_0">
                                    <div class="col">
                                        <input type="number" class="form-control form-control-sm breakdown-input" 
                                               placeholder="Ê≠•È™§1" min="0" max="${question.score}" step="0.5"
                                               onchange="updateDetailedTotal(${qIndex}, 0)">
                                    </div>
                                    <div class="col">
                                        <input type="number" class="form-control form-control-sm breakdown-input" 
                                               placeholder="Ê≠•È™§2" min="0" max="${question.score}" step="0.5"
                                               onchange="updateDetailedTotal(${qIndex}, 0)">
                                    </div>
                                    <div class="col">
                                        <input type="number" class="form-control form-control-sm breakdown-input" 
                                               placeholder="Ê≠•È™§3" min="0" max="${question.score}" step="0.5"
                                               onchange="updateDetailedTotal(${qIndex}, 0)">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label small">ÊÄªÂàÜÔºö</label>
                        <input type="number" class="form-control score-input" 
                               id="q${qIndex}_0" 
                               max="${question.score}" 
                               min="0" 
                               step="0.5"
                               placeholder="${question.score}"
                               onchange="calculateTotal()"
                               onkeyup="calculateTotal()">
                    </div>
                </div>
            </div>
        `;
    } else {
        // Â§ö‰∏™Â∞èÈ¢ò
        for (let i = 0; i < question.count; i++) {
            const subQuestionId = `q${qIndex}_${i}`;
            html += `
                <div class="detailed-item mb-3">
                    <div class="row">
                        <div class="col-md-2">
                            <label class="form-label small">Á¨¨${i + 1}È¢òÔºö</label>
                        </div>
                        <div class="col-md-6">
                            <div class="score-breakdown">
                                <div class="row g-1" id="breakdown_${subQuestionId}">
                                    <div class="col">
                                        <input type="number" class="form-control form-control-sm breakdown-input" 
                                               placeholder="Ë¶ÅÁÇπ1" min="0" max="${question.score}" step="0.5"
                                               onchange="updateDetailedTotal(${qIndex}, ${i})">
                                    </div>
                                    <div class="col">
                                        <input type="number" class="form-control form-control-sm breakdown-input" 
                                               placeholder="Ë¶ÅÁÇπ2" min="0" max="${question.score}" step="0.5"
                                               onchange="updateDetailedTotal(${qIndex}, ${i})">
                                    </div>
                                    <div class="col">
                                        <input type="number" class="form-control form-control-sm breakdown-input" 
                                               placeholder="Ë¶ÅÁÇπ3" min="0" max="${question.score}" step="0.5"
                                               onchange="updateDetailedTotal(${qIndex}, ${i})">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <input type="number" class="form-control score-input" 
                                   id="${subQuestionId}" 
                                   max="${question.score}" 
                                   min="0" 
                                   step="0.5"
                                   placeholder="${question.score}"
                                   onchange="calculateTotal()"
                                   onkeyup="calculateTotal()">
                        </div>
                    </div>
                </div>
            `;
        }
    }

    html += '</div>';
    return html;
}

// ÊôÆÈÄöËØÑÂàÜÁïåÈù¢ÔºàÂ°´Á©∫È¢òÁ≠âÔºâ
function generateNormalScoring(question, qIndex) {
    let html = '<div class="normal-scoring"><div class="row">';

    for (let i = 0; i < question.count; i++) {
        const subQuestionId = `q${qIndex}_${i}`;
        html += `
            <div class="col-md-2 col-sm-3 col-4 mb-2">
                <label class="form-label small">${question.count > 1 ? `(${i + 1})` : 'ÂæóÂàÜ'}</label>
                <input type="number" class="form-control score-input" 
                       id="${subQuestionId}" 
                       max="${question.score}" 
                       min="0" 
                       step="0.5"
                       placeholder="${question.score}"
                       onchange="calculateTotal()"
                       onkeyup="calculateTotal()">
            </div>
        `;
    }

    html += '</div></div>';
    return html;
}

// ËÆ°ÁÆóÊÄªÂàÜ
function calculateTotal() {
    if (!currentExam) return;

    let total = 0;
    const inputs = document.querySelectorAll('.score-input');

    inputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        total += value;
    });

    document.getElementById('current-total').textContent = total.toFixed(1);
}

// ‰øùÂ≠òÊàêÁª©
function saveScore() {
    const studentName = document.getElementById('student-name').value.trim();
    const studentId = document.getElementById('student-id').value.trim();
    const seatNumber = document.getElementById('seat-number').value.trim();

    if (!studentName) {
        alert('ËØ∑ËæìÂÖ•Â≠¶ÁîüÂßìÂêçÔºÅ');
        return;
    }

    if (!currentExam) {
        alert('ËØ∑ÂÖàÈÖçÁΩÆËØïÂç∑ÁªìÊûÑÔºÅ');
        return;
    }

    // Êî∂ÈõÜÂêÑÈ¢òÂæóÂàÜ
    const scores = collectScoreData();
    let totalScore = 0;

    // ËÆ°ÁÆóÊÄªÂàÜ
    Object.keys(scores).forEach(questionKey => {
        scores[questionKey].forEach(score => {
            totalScore += score;
        });
    });

    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ËØ•Â≠¶Áîü
    const existingIndex = studentsData.findIndex(s =>
        s.name === studentName && s.studentId === studentId
    );

    const studentData = {
        name: studentName,
        studentId: studentId,
        seatNumber: seatNumber,
        scores: scores,
        totalScore: totalScore,
        timestamp: new Date().toISOString()
    };

    if (existingIndex >= 0) {
        if (confirm('ËØ•Â≠¶ÁîüÊàêÁª©Â∑≤Â≠òÂú®ÔºåÊòØÂê¶Ë¶ÜÁõñÔºü')) {
            studentsData[existingIndex] = studentData;
        } else {
            return;
        }
    } else {
        studentsData.push(studentData);
    }

    // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
    localStorage.setItem('studentsData', JSON.stringify(studentsData));

    showAlert('ÊàêÁª©‰øùÂ≠òÊàêÂäüÔºÅ', 'success');
    clearForm();
    updateStudentsList();
    updateStatistics();
}

// Ê∏ÖÁ©∫Ë°®Âçï
function clearForm() {
    document.getElementById('student-name').value = '';
    document.getElementById('student-id').value = '';
    document.getElementById('seat-number').value = '';

    // Ê∏ÖÁ©∫ÊôÆÈÄöËæìÂÖ•Ê°Ü
    const inputs = document.querySelectorAll('.score-input');
    inputs.forEach(input => {
        if (input.type !== 'hidden') {
            input.value = '';
        }
    });

    // Ê∏ÖÁ©∫ÈÄâÊã©È¢òÂçïÈÄâÊåâÈíÆ
    const radios = document.querySelectorAll('input[type="radio"]');
    radios.forEach(radio => radio.checked = false);

    // Ê∏ÖÁ©∫ÂàÜÊ≠•ËØÑÂàÜËæìÂÖ•Ê°Ü
    const breakdownInputs = document.querySelectorAll('.breakdown-input');
    breakdownInputs.forEach(input => input.value = '');

    document.getElementById('current-total').textContent = '0';
}

// Âø´Êç∑Â°´ÂàÜ
function quickFill(type) {
    if (!currentExam) return;

    const inputs = document.querySelectorAll('.score-input');

    inputs.forEach(input => {
        const maxScore = parseFloat(input.getAttribute('max')) || 0;

        switch (type) {
            case 'full':
                input.value = maxScore;
                break;
            case 'half':
                input.value = (maxScore / 2).toFixed(1);
                break;
            case 'zero':
            case 'absent':
                input.value = '0';
                break;
        }
    });

    calculateTotal();
}

// Êõ¥Êñ∞Â≠¶ÁîüÂàóË°®
function updateStudentsList() {
    const container = document.getElementById('students-list');

    if (studentsData.length === 0) {
        container.innerHTML = '<p class="text-muted">ÊöÇÊó†Â≠¶ÁîüÊàêÁª©</p>';
        return;
    }

    let listHTML = '';
    studentsData.forEach((student, index) => {
        listHTML += `
            <div class="student-item" onclick="loadStudent(${index})">
                <div class="d-flex justify-content-between">
                    <div>
                        <strong>${student.name}</strong>
                        ${student.studentId ? `<small class="text-muted ms-1">${student.studentId}</small>` : ''}
                        ${student.className ? `<span class="badge bg-secondary ms-1">${student.className}</span>` : ''}
                    </div>
                    <div>
                        <span class="badge bg-primary">${student.totalScore}ÂàÜ</span>
                        <button class="btn btn-sm btn-outline-danger ms-1" onclick="deleteStudent(${index}, event)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    ${student.seatNumber ? `<small class="text-muted">Â∫ß‰ΩçÂè∑Ôºö${student.seatNumber}</small>` : '<span></span>'}
                </div>
            </div>
        `;
    });

    container.innerHTML = listHTML;
}

// Âä†ËΩΩÂ≠¶ÁîüÊàêÁª©Âà∞Ë°®Âçï
function loadStudent(index) {
    const student = studentsData[index];
    if (!student) return;

    document.getElementById('student-name').value = student.name || '';
    document.getElementById('student-id').value = student.studentId || '';
    document.getElementById('seat-number').value = student.seatNumber || '';

    // Â°´ÂÖÖÂêÑÈ¢òÂæóÂàÜ
    if (currentExam && currentExam.questions) {
        currentExam.questions.forEach((question, questionIndex) => {
            const questionKey = `q${questionIndex + 1}`;
            const questionScores = student.scores[questionKey] || [];

            if (question.type === 'choice') {
                // ÈÄâÊã©È¢òÔºöËÆæÁΩÆÂçïÈÄâÊåâÈíÆ
                const totalScore = questionScores.reduce((sum, score) => sum + score, 0);
                const correctRadio = document.querySelector(`input[name="${questionKey}"][value="correct"]`);
                const wrongRadio = document.querySelector(`input[name="${questionKey}"][value="wrong"]`);

                if (totalScore === question.score) {
                    if (correctRadio) correctRadio.checked = true;
                } else {
                    if (wrongRadio) wrongRadio.checked = true;
                }
            } else if (question.type === 'detailed') {
                // ÂàÜÊ≠•ËØÑÂàÜÈ¢òÔºöËÆæÁΩÆÊØè‰∏ÄÊ≠•ÁöÑÂàÜÊï∞
                questionScores.forEach((score, subIndex) => {
                    const input = document.getElementById(`${questionKey}_${subIndex}`);
                    if (input && input.classList.contains('breakdown-input')) {
                        input.value = score;
                    }
                });
            } else {
                // ÊôÆÈÄöÈ¢òÔºöÁõ¥Êé•ËÆæÁΩÆÂàÜÊï∞
                questionScores.forEach((score, subIndex) => {
                    const inputId = `${questionKey}_${subIndex}`;
                    const input = document.getElementById(inputId);
                    if (input) {
                        input.value = score;
                    }
                });
            }
        });
    } else {
        // ÂÖºÂÆπÊóßÁâàÊú¨Êï∞ÊçÆÊ†ºÂºè
        Object.keys(student.scores).forEach(questionKey => {
            student.scores[questionKey].forEach((score, subIndex) => {
                const inputId = `${questionKey}_${subIndex}`;
                const input = document.getElementById(inputId);
                if (input) {
                    input.value = score;
                }
            });
        });
    }

    calculateTotal();
}

// Âà†Èô§Â≠¶Áîü
function deleteStudent(index, event) {
    event.stopPropagation();

    if (confirm('Á°ÆÂÆöÂà†Èô§ËØ•Â≠¶ÁîüÁöÑÊàêÁª©ÂêóÔºü')) {
        studentsData.splice(index, 1);
        localStorage.setItem('studentsData', JSON.stringify(studentsData));
        updateStudentsList();
        updateStatistics();
        showAlert('ÊàêÁª©Âà†Èô§ÊàêÂäüÔºÅ', 'success');
    }
}

// Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ - Êô∫ËÉΩÂàÜÊûêÁâà
function updateStatistics() {
    // Êõ¥Êñ∞Áè≠Á∫ßÁ≠õÈÄâÈÄâÈ°π
    updateClassFilter();

    // Ëé∑ÂèñÁ≠õÈÄâÂêéÁöÑÂ≠¶ÁîüÊï∞ÊçÆ
    const filteredData = getFilteredStudents();

    if (filteredData.length === 0) {
        document.getElementById('total-students').textContent = '0';
        document.getElementById('average-score').textContent = '0';
        document.getElementById('max-score').textContent = '0';
        document.getElementById('min-score').textContent = '0';
        document.getElementById('scores-tbody').innerHTML = '<tr><td colspan="100%" class="text-center text-muted">ÊöÇÊó†Êï∞ÊçÆ</td></tr>';

        // Ê∏ÖÁ©∫Êô∫ËÉΩÂàÜÊûê
        updateIntelligentAnalysis([]);
        return;
    }

    const scores = filteredData.map(s => s.totalScore);
    const total = filteredData.length;
    const average = (scores.reduce((a, b) => a + b, 0) / total).toFixed(1);
    const maxScore = Math.max(...scores);
    const minScore = Math.min(...scores);

    document.getElementById('total-students').textContent = total;
    document.getElementById('average-score').textContent = average;
    document.getElementById('max-score').textContent = maxScore;
    document.getElementById('min-score').textContent = minScore;

    // ÁîüÊàêÊàêÁª©Ë°®Ê†º
    generateScoresTable();

    // Êõ¥Êñ∞ÂõæË°®
    updateScoreChart();

    // Êñ∞Â¢ûÔºöÊô∫ËÉΩÂàÜÊûê
    updateIntelligentAnalysis(filteredData);

    // Êñ∞Â¢ûÔºöÈ¢òÁõÆÂæóÂàÜÂàÜÊûê
    updateQuestionAnalysis(filteredData);

    // Êñ∞Â¢ûÔºöÁè≠Á∫ßÂØπÊØîÂàÜÊûê
    updateClassComparison(filteredData);
}

// Êô∫ËÉΩÂàÜÊûêÂäüËÉΩ
function updateIntelligentAnalysis(data) {
    if (!data || data.length === 0) return;

    const scores = data.map(s => s.totalScore);
    const totalScore = currentExam ? currentExam.totalScore : 100;

    // ËÆ°ÁÆóÁªüËÆ°ÊåáÊ†á
    const average = scores.reduce((a, b) => a + b, 0) / scores.length;
    const variance = scores.reduce((acc, score) => acc + Math.pow(score - average, 2), 0) / scores.length;
    const stdDev = Math.sqrt(variance);

    // ÂàÜÊï∞ÊÆµÂàÜÊûê
    const segments = {
        excellent: scores.filter(s => s >= totalScore * 0.9).length,
        good: scores.filter(s => s >= totalScore * 0.8 && s < totalScore * 0.9).length,
        average: scores.filter(s => s >= totalScore * 0.6 && s < totalScore * 0.8).length,
        poor: scores.filter(s => s < totalScore * 0.6).length
    };

    // ÁîüÊàêÊô∫ËÉΩÂàÜÊûêÊä•Âëä
    const analysisHtml = `
        <div class="card mb-3">
            <div class="card-header">
                <h5><i class="fas fa-brain text-info me-2"></i>Êô∫ËÉΩÂàÜÊûêÊä•Âëä</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>ÊàêÁª©ÂàÜÂ∏É</h6>
                        <div class="progress-stacked mb-3" style="height: 25px;">
                            <div class="progress" role="progressbar" style="width: ${(segments.excellent / data.length * 100)}%" aria-valuenow="${segments.excellent}" aria-valuemin="0" aria-valuemax="${data.length}">
                                <div class="progress-bar bg-success">‰ºòÁßÄ(${segments.excellent}‰∫∫)</div>
                            </div>
                            <div class="progress" role="progressbar" style="width: ${(segments.good / data.length * 100)}%" aria-valuenow="${segments.good}" aria-valuemin="0" aria-valuemax="${data.length}">
                                <div class="progress-bar bg-info">ËâØÂ•Ω(${segments.good}‰∫∫)</div>
                            </div>
                            <div class="progress" role="progressbar" style="width: ${(segments.average / data.length * 100)}%" aria-valuenow="${segments.average}" aria-valuemin="0" aria-valuemax="${data.length}">
                                <div class="progress-bar bg-warning">‰∏≠Á≠â(${segments.average}‰∫∫)</div>
                            </div>
                            <div class="progress" role="progressbar" style="width: ${(segments.poor / data.length * 100)}%" aria-valuenow="${segments.poor}" aria-valuemin="0" aria-valuemax="${data.length}">
                                <div class="progress-bar bg-danger">ÂæÖÊèêÈ´ò(${segments.poor}‰∫∫)</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>ÁªüËÆ°ÊåáÊ†á</h6>
                        <ul class="list-unstyled">
                            <li><strong>Ê†áÂáÜÂ∑Æ:</strong> ${stdDev.toFixed(2)} (${stdDev < 10 ? 'ÊàêÁª©ÈõÜ‰∏≠' : stdDev < 20 ? 'ÂàÜÂ∏ÉÈÄÇ‰∏≠' : 'Â∑ÆË∑ùËæÉÂ§ß'})</li>
                            <li><strong>ÂèäÊ†ºÁéá:</strong> ${((scores.filter(s => s >= totalScore * 0.6).length / data.length) * 100).toFixed(1)}%</li>
                            <li><strong>‰ºòÁßÄÁéá:</strong> ${((segments.excellent / data.length) * 100).toFixed(1)}%</li>
                        </ul>
                    </div>
                </div>
                <div class="mt-3">
                    <h6>ÊïôÂ≠¶Âª∫ËÆÆ</h6>
                    <div class="alert alert-light">
                        ${generateTeachingAdvice(segments, data.length, average, totalScore)}
                    </div>
                </div>
            </div>
        </div>
    `;

    // ÊèíÂÖ•ÊàñÊõ¥Êñ∞Êô∫ËÉΩÂàÜÊûêÂå∫Âüü
    let analysisContainer = document.getElementById('intelligent-analysis');
    if (!analysisContainer) {
        analysisContainer = document.createElement('div');
        analysisContainer.id = 'intelligent-analysis';
        document.querySelector('#statistics .container').appendChild(analysisContainer);
    }
    analysisContainer.innerHTML = analysisHtml;
}

// ÁîüÊàêÊïôÂ≠¶Âª∫ËÆÆ
function generateTeachingAdvice(segments, total, average, totalScore) {
    const excellentRate = segments.excellent / total;
    const poorRate = segments.poor / total;

    let advice = [];

    if (excellentRate > 0.3) {
        advice.push("üìà ‰ºòÁßÄÂ≠¶ÁîüÊØî‰æãËæÉÈ´òÔºåÂèØÈÄÇÂΩìÂ¢ûÂä†ÊåëÊàòÊÄßÈ¢òÁõÆ");
    }

    if (poorRate > 0.3) {
        advice.push("üìö ÈúÄË¶ÅÂä†Âº∫Âü∫Á°ÄÁü•ËØÜÊïôÂ≠¶ÔºåÂÖ≥Ê≥®Â≠¶‰π†Âõ∞ÈöæÂ≠¶Áîü");
    }

    if (average < totalScore * 0.6) {
        advice.push("‚ö†Ô∏è Êï¥‰ΩìÊàêÁª©ÂÅè‰ΩéÔºåÂª∫ËÆÆÂõûÈ°æÊïôÂ≠¶ÈáçÁÇπ");
    } else if (average > totalScore * 0.8) {
        advice.push("‚ú® Êï¥‰ΩìÊàêÁª©‰ºòÁßÄÔºåÂèØËÄÉËôëÊèêÂçáÈöæÂ∫¶");
    }

    if (segments.average > total * 0.5) {
        advice.push("üìä ÊàêÁª©ÂàÜÂ∏ÉËæÉ‰∏∫ÈõÜ‰∏≠ÔºåÊïôÂ≠¶ÊïàÊûúËâØÂ•Ω");
    }

    return advice.length > 0 ? advice.join('<br>') : "üìã ÊàêÁª©ÂàÜÂ∏ÉÂêàÁêÜÔºåÁªßÁª≠‰øùÊåÅÂΩìÂâçÊïôÂ≠¶Á≠ñÁï•";
}

// È¢òÁõÆÂæóÂàÜÂàÜÊûê
function updateQuestionAnalysis(data) {
    if (!currentExam || !data.length) return;

    const questionStats = {};

    // ÂàÜÊûêÊØèÈ¢òÂæóÂàÜÊÉÖÂÜµ
    currentExam.questions.forEach((question, qIndex) => {
        const questionKey = `q${qIndex + 1}`;
        const questionScores = [];

        data.forEach(student => {
            if (student.scores && student.scores[questionKey]) {
                const scores = Array.isArray(student.scores[questionKey]) ?
                    student.scores[questionKey] : [student.scores[questionKey]];
                questionScores.push(...scores);
            }
        });

        if (questionScores.length > 0) {
            const avg = questionScores.reduce((a, b) => a + b, 0) / questionScores.length;
            const fullScore = question.score * question.count;
            questionStats[questionKey] = {
                title: question.description || `Á¨¨${qIndex + 1}È¢ò`,
                average: avg.toFixed(1),
                fullScore: fullScore,
                accuracy: ((avg / fullScore) * 100).toFixed(1)
            };
        }
    });

    // ÁîüÊàêÈ¢òÁõÆÂàÜÊûêË°®Ê†º
    const analysisHtml = `
        <div class="card mb-3">
            <div class="card-header">
                <h5><i class="fas fa-chart-line text-primary me-2"></i>È¢òÁõÆÂæóÂàÜÂàÜÊûê</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>È¢òÁõÆ</th>
                                <th>Âπ≥ÂùáÂàÜ</th>
                                <th>Êª°ÂàÜ</th>
                                <th>Ê≠£Á°ÆÁéá</th>
                                <th>ÈöæÂ∫¶ËØÑ‰º∞</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${Object.entries(questionStats).map(([key, stat]) => `
                                <tr>
                                    <td>${stat.title}</td>
                                    <td>${stat.average}</td>
                                    <td>${stat.fullScore}</td>
                                    <td>
                                        <div class="progress" style="height: 20px;">
                                            <div class="progress-bar ${stat.accuracy > 80 ? 'bg-success' : stat.accuracy > 60 ? 'bg-warning' : 'bg-danger'}" 
                                                 style="width: ${stat.accuracy}%">${stat.accuracy}%</div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge ${stat.accuracy > 80 ? 'bg-success' : stat.accuracy > 60 ? 'bg-warning' : 'bg-danger'}">
                                            ${stat.accuracy > 80 ? 'ÁÆÄÂçï' : stat.accuracy > 60 ? 'ÈÄÇ‰∏≠' : 'Âõ∞Èöæ'}
                                        </span>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;

    // ÊèíÂÖ•È¢òÁõÆÂàÜÊûê
    let questionContainer = document.getElementById('question-analysis');
    if (!questionContainer) {
        questionContainer = document.createElement('div');
        questionContainer.id = 'question-analysis';
        document.querySelector('#statistics .container').appendChild(questionContainer);
    }
    questionContainer.innerHTML = analysisHtml;
}

// Áè≠Á∫ßÂØπÊØîÂàÜÊûê
function updateClassComparison(data) {
    const classesByName = {};

    // ÊåâÁè≠Á∫ßÂàÜÁªÑ
    data.forEach(student => {
        const className = student.className || 'Êú™ÂàÜÁè≠';
        if (!classesByName[className]) {
            classesByName[className] = [];
        }
        classesByName[className].push(student.totalScore);
    });

    if (Object.keys(classesByName).length <= 1) return;

    // ËÆ°ÁÆóÂêÑÁè≠Á∫ßÁªüËÆ°
    const classStats = Object.entries(classesByName).map(([className, scores]) => ({
        name: className,
        count: scores.length,
        average: (scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(1),
        max: Math.max(...scores),
        min: Math.min(...scores)
    }));

    // ÁîüÊàêÁè≠Á∫ßÂØπÊØî
    const comparisonHtml = `
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-users text-success me-2"></i>Áè≠Á∫ßÂØπÊØîÂàÜÊûê</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Áè≠Á∫ß</th>
                                <th>‰∫∫Êï∞</th>
                                <th>Âπ≥ÂùáÂàÜ</th>
                                <th>ÊúÄÈ´òÂàÜ</th>
                                <th>ÊúÄ‰ΩéÂàÜ</th>
                                <th>Áè≠Á∫ßÊéíÂêç</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${classStats
            .sort((a, b) => parseFloat(b.average) - parseFloat(a.average))
            .map((cls, index) => `
                                <tr>
                                    <td><strong>${cls.name}</strong></td>
                                    <td>${cls.count}</td>
                                    <td>${cls.average}</td>
                                    <td class="text-success">${cls.max}</td>
                                    <td class="text-danger">${cls.min}</td>
                                    <td>
                                        <span class="badge ${index === 0 ? 'bg-warning' : index === 1 ? 'bg-info' : 'bg-secondary'}">
                                            Á¨¨${index + 1}Âêç
                                        </span>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;

    // ÊèíÂÖ•Áè≠Á∫ßÂØπÊØî
    let classContainer = document.getElementById('class-comparison');
    if (!classContainer) {
        classContainer = document.createElement('div');
        classContainer.id = 'class-comparison';
        classContainer.className = 'mt-3';
        document.querySelector('#statistics .container').appendChild(classContainer);
    }
    classContainer.innerHTML = comparisonHtml;
}

// Êõ¥Êñ∞Áè≠Á∫ßÁ≠õÈÄâÂô®
function updateClassFilter() {
    const classFilter = document.getElementById('class-filter');
    if (!classFilter) return;

    // Ëé∑ÂèñÊâÄÊúâÁè≠Á∫ß
    const classes = new Set();
    studentsData.forEach(student => {
        const className = student.className || 'Êú™ÂàÜÁè≠';
        classes.add(className);
    });

    // ‰øùÂ≠òÂΩìÂâçÈÄâ‰∏≠ÁöÑÁè≠Á∫ß
    const currentValue = classFilter.value;

    // ÈáçÊñ∞ÁîüÊàêÈÄâÈ°π
    classFilter.innerHTML = '<option value="">ÂÖ®ÈÉ®Áè≠Á∫ß</option>';
    Array.from(classes).sort().forEach(className => {
        const option = document.createElement('option');
        option.value = className;
        option.textContent = className;
        classFilter.appendChild(option);
    });

    // ÊÅ¢Â§ç‰πãÂâçÁöÑÈÄâÊã©
    if (Array.from(classes).includes(currentValue)) {
        classFilter.value = currentValue;
    }
}

// Ëé∑ÂèñÁ≠õÈÄâÂêéÁöÑÂ≠¶ÁîüÊï∞ÊçÆ
function getFilteredStudents() {
    const classFilter = document.getElementById('class-filter');
    const selectedClass = classFilter?.value || '';

    if (!selectedClass) {
        return studentsData;
    }

    return studentsData.filter(student => {
        const studentClass = student.className || 'Êú™ÂàÜÁè≠';
        return studentClass === selectedClass;
    });
}

// ÊåâÁè≠Á∫ßÁ≠õÈÄâ
function filterByClass() {
    updateStatistics();
}

// ÁîüÊàêÊàêÁª©Ë°®Ê†º
function generateScoresTable() {
    if (!currentExam) return;

    const headerRow = document.getElementById('table-header');
    const tbody = document.getElementById('scores-tbody');
    const filteredData = getFilteredStudents();

    // ÁîüÊàêË°®Â§¥
    let headerHTML = '<th>ÂßìÂêç</th><th>Â≠¶Âè∑</th><th>Áè≠Á∫ß</th><th>Â∫ß‰ΩçÂè∑</th>';

    currentExam.questions.forEach((question, index) => {
        if (question.count === 1) {
            headerHTML += `<th>Á¨¨${index + 1}È¢ò</th>`;
        } else {
            for (let i = 0; i < question.count; i++) {
                headerHTML += `<th>Á¨¨${index + 1}È¢ò(${i + 1})</th>`;
            }
        }
    });

    headerHTML += '<th class="table-warning">ÊÄªÂàÜ</th>';
    headerRow.innerHTML = headerHTML;

    // ÁîüÊàêÊï∞ÊçÆË°å
    let tbodyHTML = '';
    filteredData.forEach(student => {
        tbodyHTML += '<tr>';
        tbodyHTML += `<td>${student.name}</td>`;
        tbodyHTML += `<td>${student.studentId || '-'}</td>`;
        tbodyHTML += `<td>${student.className || 'Êú™ÂàÜÁè≠'}</td>`;
        tbodyHTML += `<td>${student.seatNumber || '-'}</td>`;

        Object.keys(student.scores).forEach(questionKey => {
            student.scores[questionKey].forEach(score => {
                tbodyHTML += `<td>${score}</td>`;
            });
        });

        tbodyHTML += `<td class="table-warning fw-bold">${student.totalScore}</td>`;
        tbodyHTML += '</tr>';
    });

    tbody.innerHTML = tbodyHTML;
}

// Êõ¥Êñ∞ÂàÜÊï∞ÂàÜÂ∏ÉÂõæË°®
function updateScoreChart() {
    const ctx = document.getElementById('scoreChart').getContext('2d');
    const filteredData = getFilteredStudents();

    if (filteredData.length === 0) return;

    // ËÆ°ÁÆóÂàÜÊï∞ÊÆµÂàÜÂ∏É
    const ranges = ['0-60', '60-70', '70-80', '80-90', '90-100'];
    const counts = [0, 0, 0, 0, 0];

    filteredData.forEach(student => {
        const score = student.totalScore;
        if (score < 60) counts[0]++;
        else if (score < 70) counts[1]++;
        else if (score < 80) counts[2]++;
        else if (score < 90) counts[3]++;
        else counts[4]++;
    });

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ranges,
            datasets: [{
                label: '‰∫∫Êï∞',
                data: counts,
                backgroundColor: [
                    '#dc3545',
                    '#fd7e14',
                    '#ffc107',
                    '#28a745',
                    '#007bff'
                ]
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });
}

// Êõ¥Êñ∞ÂêÑÈ¢òÁªüËÆ°
function updateQuestionStats() {
    const filteredData = getFilteredStudents();

    if (!currentExam || filteredData.length === 0) {
        document.getElementById('question-stats').innerHTML = '<p class="text-muted">ÊöÇÊó†Êï∞ÊçÆ</p>';
        return;
    }

    let statsHTML = '';

    currentExam.questions.forEach((question, qIndex) => {
        const questionKey = `q${qIndex}`;
        let questionTotal = 0;
        let questionMax = question.total;
        let correctCount = 0;

        filteredData.forEach(student => {
            const questionScores = student.scores[questionKey] || [];
            const questionSum = questionScores.reduce((a, b) => a + b, 0);
            questionTotal += questionSum;

            if (questionSum >= questionMax * 0.8) {
                correctCount++;
            }
        });

        const avgScore = (questionTotal / filteredData.length).toFixed(1);
        const correctRate = ((correctCount / filteredData.length) * 100).toFixed(1);

        statsHTML += `
            <div class="mb-3 p-2 bg-light rounded">
                <div class="d-flex justify-content-between">
                    <strong>Á¨¨${qIndex + 1}È¢ò</strong>
                    <span class="text-muted">Êª°ÂàÜ${questionMax}ÂàÜ</span>
                </div>
                <div class="mt-1">
                    <small class="text-muted">Âπ≥ÂùáÂàÜÔºö${avgScore}ÂàÜ</small><br>
                    <small class="text-muted">ÂæóÂàÜÁéáÔºö${correctRate}%</small>
                </div>
            </div>
        `;
    });

    document.getElementById('question-stats').innerHTML = statsHTML;
}

// ÂØºÂá∫Excel
// ÂØºÂá∫Excel - Â¢ûÂº∫Áâà
function exportToExcel() {
    if (!currentExam || studentsData.length === 0) {
        showAlert('ÊöÇÊó†Êï∞ÊçÆÂèØÂØºÂá∫ÔºÅ', 'warning');
        return;
    }

    try {
        // ÂàõÂª∫Â∑•‰ΩúÁ∞ø
        const wb = XLSX.utils.book_new();

        // 1. ÊàêÁª©ÂçïÂ∑•‰ΩúË°®
        const scoreSheet = createScoreSheet();
        XLSX.utils.book_append_sheet(wb, scoreSheet, 'ÊàêÁª©ÊòéÁªÜ');

        // 2. ÁªüËÆ°ÂàÜÊûêÂ∑•‰ΩúË°®
        const statsSheet = createStatsSheet();
        XLSX.utils.book_append_sheet(wb, statsSheet, 'ÁªüËÆ°ÂàÜÊûê');

        // 3. Áè≠Á∫ßÊ±áÊÄªÂ∑•‰ΩúË°®
        const classSheet = createClassSummarySheet();
        XLSX.utils.book_append_sheet(wb, classSheet, 'Áè≠Á∫ßÊ±áÊÄª');

        // ÂØºÂá∫Êñá‰ª∂
        const filename = `${currentExam.subject || 'ËÄÉËØï'}_${currentExam.examName || 'ÊàêÁª©Êä•Âëä'}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, filename);

        showAlert('üìä Êô∫ËÉΩÊä•Ë°®ÂØºÂá∫ÊàêÂäüÔºÅÂåÖÂê´ÊàêÁª©ÊòéÁªÜ„ÄÅÁªüËÆ°ÂàÜÊûêÂíåÁè≠Á∫ßÊ±áÊÄª', 'success');
    } catch (error) {
        showAlert('ÂØºÂá∫Â§±Ë¥•Ôºö' + error.message, 'danger');
    }
}

// ÂàõÂª∫ÊàêÁª©ÊòéÁªÜË°®
function createScoreSheet() {
    const data = [];

    // Ë°®Â§¥
    const headers = ['Â∫èÂè∑', 'ÂßìÂêç', 'Â≠¶Âè∑', 'Áè≠Á∫ß', 'Â∫ß‰ΩçÂè∑'];

    // Ê∑ªÂä†È¢òÁõÆÂàó
    currentExam.questions.forEach((question, index) => {
        if (question.count === 1) {
            headers.push(`${question.description || 'Á¨¨' + (index + 1) + 'È¢ò'}(${question.score}ÂàÜ)`);
        } else {
            for (let i = 0; i < question.count; i++) {
                headers.push(`${question.description || 'Á¨¨' + (index + 1) + 'È¢ò'}-${i + 1}(${question.score}ÂàÜ)`);
            }
        }
    });

    headers.push('ÊÄªÂàÜ', 'ÊéíÂêç', 'Á≠âÁ∫ß');
    data.push(headers);

    // ËÆ°ÁÆóÊéíÂêç
    const sortedStudents = [...studentsData].sort((a, b) => b.totalScore - a.totalScore);

    // Êï∞ÊçÆË°å
    sortedStudents.forEach((student, index) => {
        const row = [
            index + 1,
            student.name,
            student.studentId || '',
            student.className || 'Êú™ÂàÜÁè≠',
            student.seatNumber || ''
        ];

        // Ê∑ªÂä†ÂêÑÈ¢òÂæóÂàÜ
        if (student.scores) {
            Object.keys(student.scores).sort().forEach(questionKey => {
                const questionScores = student.scores[questionKey];
                if (Array.isArray(questionScores)) {
                    questionScores.forEach(score => row.push(score));
                } else {
                    row.push(questionScores);
                }
            });
        }

        row.push(
            student.totalScore,
            index + 1,
            getGradeLevel(student.totalScore, currentExam.totalScore)
        );
        data.push(row);
    });

    return XLSX.utils.aoa_to_sheet(data);
}

// ÂàõÂª∫ÁªüËÆ°ÂàÜÊûêË°®
function createStatsSheet() {
    const data = [];
    const scores = studentsData.map(s => s.totalScore);
    const totalScore = currentExam.totalScore || 100;

    // Âü∫Á°ÄÁªüËÆ°
    const average = scores.reduce((a, b) => a + b, 0) / scores.length;
    const maxScore = Math.max(...scores);
    const minScore = Math.min(...scores);
    const variance = scores.reduce((acc, score) => acc + Math.pow(score - average, 2), 0) / scores.length;
    const stdDev = Math.sqrt(variance);

    // ÂàÜÊï∞ÊÆµÁªüËÆ°
    const segments = {
        excellent: scores.filter(s => s >= totalScore * 0.9).length,
        good: scores.filter(s => s >= totalScore * 0.8 && s < totalScore * 0.9).length,
        average: scores.filter(s => s >= totalScore * 0.6 && s < totalScore * 0.8).length,
        poor: scores.filter(s => s < totalScore * 0.6).length
    };

    // ÁªüËÆ°Êï∞ÊçÆ
    data.push(['ËÄÉËØïÁªüËÆ°ÂàÜÊûêÊä•Âëä']);
    data.push(['ÁîüÊàêÊó∂Èó¥', new Date().toLocaleString()]);
    data.push(['ËÄÉËØïÁßëÁõÆ', currentExam.subject || '']);
    data.push(['ËÄÉËØïÂêçÁß∞', currentExam.examName || '']);
    data.push([]);

    data.push(['Âü∫Á°ÄÁªüËÆ°']);
    data.push(['ÂèÇËÄÉ‰∫∫Êï∞', scores.length]);
    data.push(['Êª°ÂàÜ', totalScore]);
    data.push(['Âπ≥ÂùáÂàÜ', average.toFixed(2)]);
    data.push(['ÊúÄÈ´òÂàÜ', maxScore]);
    data.push(['ÊúÄ‰ΩéÂàÜ', minScore]);
    data.push(['Ê†áÂáÜÂ∑Æ', stdDev.toFixed(2)]);
    data.push(['ÂèäÊ†ºÁéá', ((scores.filter(s => s >= totalScore * 0.6).length / scores.length) * 100).toFixed(1) + '%']);
    data.push(['‰ºòÁßÄÁéá', ((segments.excellent / scores.length) * 100).toFixed(1) + '%']);
    data.push([]);

    data.push(['ÂàÜÊï∞ÊÆµÂàÜÂ∏É']);
    data.push(['‰ºòÁßÄ(90%‰ª•‰∏ä)', segments.excellent, ((segments.excellent / scores.length) * 100).toFixed(1) + '%']);
    data.push(['ËâØÂ•Ω(80%-89%)', segments.good, ((segments.good / scores.length) * 100).toFixed(1) + '%']);
    data.push(['‰∏≠Á≠â(60%-79%)', segments.average, ((segments.average / scores.length) * 100).toFixed(1) + '%']);
    data.push(['ÂæÖÊèêÈ´ò(60%‰ª•‰∏ã)', segments.poor, ((segments.poor / scores.length) * 100).toFixed(1) + '%']);

    return XLSX.utils.aoa_to_sheet(data);
}

// ÂàõÂª∫Áè≠Á∫ßÊ±áÊÄªË°®
function createClassSummarySheet() {
    const classesByName = {};

    // ÊåâÁè≠Á∫ßÂàÜÁªÑ
    studentsData.forEach(student => {
        const className = student.className || 'Êú™ÂàÜÁè≠';
        if (!classesByName[className]) {
            classesByName[className] = [];
        }
        classesByName[className].push(student);
    });

    const data = [];
    data.push(['Áè≠Á∫ßÊ±áÊÄªÁªüËÆ°']);
    data.push(['Áè≠Á∫ßÂêçÁß∞', '‰∫∫Êï∞', 'Âπ≥ÂùáÂàÜ', 'ÊúÄÈ´òÂàÜ', 'ÊúÄ‰ΩéÂàÜ', 'ÂèäÊ†º‰∫∫Êï∞', 'ÂèäÊ†ºÁéá', '‰ºòÁßÄ‰∫∫Êï∞', '‰ºòÁßÄÁéá']);

    Object.entries(classesByName).forEach(([className, students]) => {
        const scores = students.map(s => s.totalScore);
        const average = scores.reduce((a, b) => a + b, 0) / scores.length;
        const maxScore = Math.max(...scores);
        const minScore = Math.min(...scores);
        const passCount = scores.filter(s => s >= (currentExam.totalScore || 100) * 0.6).length;
        const excellentCount = scores.filter(s => s >= (currentExam.totalScore || 100) * 0.9).length;

        data.push([
            className,
            students.length,
            average.toFixed(1),
            maxScore,
            minScore,
            passCount,
            ((passCount / students.length) * 100).toFixed(1) + '%',
            excellentCount,
            ((excellentCount / students.length) * 100).toFixed(1) + '%'
        ]);
    });

    return XLSX.utils.aoa_to_sheet(data);
}

// Ëé∑ÂèñÁ≠âÁ∫ß
function getGradeLevel(score, totalScore) {
    const percentage = score / totalScore;
    if (percentage >= 0.9) return 'A';
    if (percentage >= 0.8) return 'B';
    if (percentage >= 0.6) return 'C';
    return 'D';
}

// ÊâìÂç∞Êä•Ë°® - Â¢ûÂº∫Áâà
function printReport() {
    // ÂàõÂª∫ÊâìÂç∞ÂÜÖÂÆπ
    const printContent = generatePrintContent();

    // ÂàõÂª∫Êñ∞Á™óÂè£ËøõË°åÊâìÂç∞
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>ÊàêÁª©Êä•Ë°® - ${currentExam?.subject || ''} ${currentExam?.examName || ''}</title>
            <style>
                body { font-family: 'Microsoft YaHei', sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 20px; border-bottom: 2px solid #333; padding-bottom: 10px; }
                .stats { display: flex; justify-content: space-between; margin: 20px 0; }
                .stat-item { text-align: center; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #333; padding: 8px; text-align: center; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .summary { margin: 20px 0; padding: 15px; background-color: #f9f9f9; }
                @media print {
                    body { margin: 0; }
                    .no-print { display: none !important; }
                }
            </style>
        </head>
        <body>
            ${printContent}
            <script>
                window.onload = function() {
                    window.print();
                    window.onafterprint = function() {
                        window.close();
                    };
                };
            </script>
        </body>
        </html>
    `);
    printWindow.document.close();
}

// ÁîüÊàêÊâìÂç∞ÂÜÖÂÆπ
function generatePrintContent() {
    if (!currentExam || studentsData.length === 0) {
        return '<div>ÊöÇÊó†Êï∞ÊçÆÂèØÊâìÂç∞</div>';
    }

    const scores = studentsData.map(s => s.totalScore);
    const average = (scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(1);
    const maxScore = Math.max(...scores);
    const minScore = Math.min(...scores);

    // ÊéíÂ∫èÂ≠¶ÁîüÊï∞ÊçÆ
    const sortedStudents = [...studentsData].sort((a, b) => b.totalScore - a.totalScore);

    let content = `
        <div class="header">
            <h1>${currentExam.subject || ''} ${currentExam.examName || ''} ÊàêÁª©Êä•Ë°®</h1>
            <p>ÁîüÊàêÊó∂Èó¥Ôºö${new Date().toLocaleString()}</p>
        </div>
        
        <div class="stats">
            <div class="stat-item">
                <h3>${studentsData.length}</h3>
                <p>ÂèÇËÄÉ‰∫∫Êï∞</p>
            </div>
            <div class="stat-item">
                <h3>${average}</h3>
                <p>Âπ≥ÂùáÂàÜ</p>
            </div>
            <div class="stat-item">
                <h3>${maxScore}</h3>
                <p>ÊúÄÈ´òÂàÜ</p>
            </div>
            <div class="stat-item">
                <h3>${minScore}</h3>
                <p>ÊúÄ‰ΩéÂàÜ</p>
            </div>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>ÊéíÂêç</th>
                    <th>ÂßìÂêç</th>
                    <th>Â≠¶Âè∑</th>
                    <th>Áè≠Á∫ß</th>
                    <th>ÊÄªÂàÜ</th>
                    <th>Á≠âÁ∫ß</th>
                </tr>
            </thead>
            <tbody>
    `;

    sortedStudents.forEach((student, index) => {
        content += `
            <tr>
                <td>${index + 1}</td>
                <td>${student.name}</td>
                <td>${student.studentId || ''}</td>
                <td>${student.className || 'Êú™ÂàÜÁè≠'}</td>
                <td><strong>${student.totalScore}</strong></td>
                <td>${getGradeLevel(student.totalScore, currentExam.totalScore || 100)}</td>
            </tr>
        `;
    });

    content += `
            </tbody>
        </table>
        
        <div class="summary">
            <h3>ÁªüËÆ°ÂàÜÊûê</h3>
            <p><strong>ÂèäÊ†ºÁéáÔºö</strong>${((scores.filter(s => s >= (currentExam.totalScore || 100) * 0.6).length / scores.length) * 100).toFixed(1)}%</p>
            <p><strong>‰ºòÁßÄÁéáÔºö</strong>${((scores.filter(s => s >= (currentExam.totalScore || 100) * 0.9).length / scores.length) * 100).toFixed(1)}%</p>
        </div>
    `;

    return content;
}

// ÊâπÈáèÂΩïÂÖ•Â≠¶ÁîüÂêçÂçï
function showBatchInput() {
    const modal = new bootstrap.Modal(document.getElementById('batchInputModal'));
    modal.show();
}

// Â§ÑÁêÜÊâπÈáèÂΩïÂÖ•
function processBatchInput() {
    const textarea = document.getElementById('batch-students');
    const lines = textarea.value.trim().split('\n');

    let count = 0;
    lines.forEach(line => {
        const parts = line.trim().split(/\s+/);
        if (parts.length >= 1 && parts[0]) {
            const name = parts[0];
            const studentId = parts[1] || '';
            const seatNumber = parts[2] || '';

            // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
            const exists = studentsData.some(s =>
                s.name === name && s.studentId === studentId
            );

            if (!exists) {
                studentsData.push({
                    name: name,
                    studentId: studentId,
                    seatNumber: seatNumber,
                    scores: {},
                    totalScore: 0,
                    timestamp: new Date().toISOString()
                });
                count++;
            }
        }
    });

    if (count > 0) {
        localStorage.setItem('studentsData', JSON.stringify(studentsData));
        updateStudentsList();
        showAlert(`ÊàêÂäüÂØºÂÖ•${count}‰∏™Â≠¶ÁîüÔºÅ`, 'success');
    }

    const modal = bootstrap.Modal.getInstance(document.getElementById('batchInputModal'));
    modal.hide();
    textarea.value = '';
}

// ‰ªéExcelÂØºÂÖ•
function importFromExcel() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xlsx,.xls';

    input.onchange = function (e) {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function (e) {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

            // Â§ÑÁêÜÂØºÂÖ•Êï∞ÊçÆ
            let count = 0;
            jsonData.forEach((row, index) => {
                if (index === 0 || !row[0]) return; // Ë∑≥ËøáË°®Â§¥ÂíåÁ©∫Ë°å

                const name = row[0];
                const studentId = row[1] || '';
                const seatNumber = row[2] || '';

                const exists = studentsData.some(s =>
                    s.name === name && s.studentId === studentId
                );

                if (!exists) {
                    studentsData.push({
                        name: name,
                        studentId: studentId,
                        seatNumber: seatNumber,
                        scores: {},
                        totalScore: 0,
                        timestamp: new Date().toISOString()
                    });
                    count++;
                }
            });

            if (count > 0) {
                localStorage.setItem('studentsData', JSON.stringify(studentsData));
                updateStudentsList();
                showAlert(`‰ªéExcelÊàêÂäüÂØºÂÖ•${count}‰∏™Â≠¶ÁîüÔºÅ`, 'success');
            }
        };

        reader.readAsArrayBuffer(file);
    };

    input.click();
}

// ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ
function showAlert(message, type) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

    document.body.appendChild(alert);

    setTimeout(() => {
        alert.remove();
    }, 3000);
}

// Âä†ËΩΩ‰øùÂ≠òÁöÑÊï∞ÊçÆ
function loadSavedData() {
    // Âä†ËΩΩËØïÂç∑ÈÖçÁΩÆ
    const savedExam = localStorage.getItem('currentExam');
    if (savedExam) {
        currentExam = JSON.parse(savedExam);
        // Â¶ÇÊûúÊúâ‰øùÂ≠òÁöÑÈÖçÁΩÆÔºåÂ∞ÜÂÖ∂Âä†ËΩΩÂà∞ÁºñËæëÁïåÈù¢
        loadExamToEditForm();
    }

    // Âä†ËΩΩÂ≠¶ÁîüÊï∞ÊçÆ
    const savedStudents = localStorage.getItem('studentsData');
    if (savedStudents) {
        studentsData = JSON.parse(savedStudents);
    }
}

// Â∞ÜËØïÂç∑ÈÖçÁΩÆÂä†ËΩΩÂà∞ÁºñËæëË°®Âçï
function loadExamToEditForm() {
    if (!currentExam) return;

    // Â°´ÂÖÖÂü∫Êú¨‰ø°ÊÅØ
    document.getElementById('subject').value = currentExam.subject || '';
    document.getElementById('exam-name').value = currentExam.examName || '';
    document.getElementById('class-name').value = currentExam.className || '';
    document.getElementById('total-score').value = currentExam.totalScore || '';

    // Ê∏ÖÁ©∫Áé∞ÊúâÈ¢òÁõÆ
    const container = document.getElementById('questions-container');
    container.innerHTML = '';
    questionCount = 0;

    // ÈáçÂª∫È¢òÁõÆ
    if (currentExam.questions && currentExam.questions.length > 0) {
        currentExam.questions.forEach((question, index) => {
            addQuestion();
            const questionCard = container.children[index];

            // ËÆæÁΩÆÈ¢òÁõÆÁ±ªÂûã
            const typeSelect = questionCard.querySelector('.question-type');
            typeSelect.value = question.type || 'normal';

            // ËÆæÁΩÆÈ¢òÁõÆÊèèËø∞
            const descInput = questionCard.querySelector('.question-description');
            if (descInput) {
                descInput.value = question.description || '';
            }

            // ËÆæÁΩÆÈ¢òÁõÆÊï∞Èáè
            const countInput = questionCard.querySelector('.question-count');
            countInput.value = question.count || 1;

            // ËÆæÁΩÆÈ¢òÁõÆÂàÜÊï∞
            const scoreInput = questionCard.querySelector('.question-score');
            scoreInput.value = question.score || 0;

            // Â¶ÇÊûúÊòØÂàÜÊ≠•ËØÑÂàÜÈ¢òÔºåËÆæÁΩÆÊ≠•È™§‰ø°ÊÅØ
            if (question.type === 'detailed' && question.steps) {
                // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†Êõ¥Â§çÊùÇÁöÑÊ≠•È™§ËÆæÁΩÆÈÄªËæë
                // ÁõÆÂâçÂÖàÁÆÄÂåñÂ§ÑÁêÜ
            }
        });
    }

    // Êõ¥Êñ∞È¢ÑËßà
    setTimeout(() => {
        updatePreview();
    }, 100);
}

// Âä†ËΩΩÊ®°ÊùøÈÖçÁΩÆ
function loadTemplate() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';

    input.onchange = function (e) {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function (e) {
            try {
                const template = JSON.parse(e.target.result);

                // È™åËØÅÊ®°ÊùøÊ†ºÂºè
                if (!template.questions || !Array.isArray(template.questions)) {
                    throw new Error('Ê®°ÊùøÊ†ºÂºè‰∏çÊ≠£Á°Æ');
                }

                // Ê∑ªÂä†Âä†ËΩΩÂä®Áîª
                const container = document.getElementById('questions-container');
                container.innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Âä†ËΩΩ‰∏≠...</span></div><p class="mt-2">Ê≠£Âú®Âä†ËΩΩÊ®°Êùø...</p></div>';

                setTimeout(() => {
                    // Â°´ÂÖÖË°®Âçï
                    document.getElementById('subject').value = template.subject || '';
                    document.getElementById('exam-name').value = template.examName || '';
                    document.getElementById('class-name').value = template.className || '';
                    document.getElementById('total-score').value = template.totalScore || '';

                    // Ê∏ÖÁ©∫Âπ∂ÈáçÂª∫È¢òÁõÆ
                    container.innerHTML = '';
                    questionCount = 0;

                    template.questions.forEach(q => {
                        addQuestion();
                        const lastCard = document.querySelector('.question-card:last-child');
                        lastCard.querySelector('.question-type').value = q.type;
                        lastCard.querySelector('.question-count').value = q.count;
                        lastCard.querySelector('.question-score').value = q.score;
                        lastCard.querySelector('.question-desc').value = q.description || '';
                    });

                    updatePreview();
                    updateConfigProgress();

                    // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØÂπ∂Ëá™Âä®‰øùÂ≠ò
                    saveExamConfig();
                    showAlert('Ê®°ÊùøÂä†ËΩΩÊàêÂäüÔºÅÈÖçÁΩÆÂ∑≤Ëá™Âä®‰øùÂ≠ò', 'success');

                }, 800); // ÁªôÁî®Êà∑Ë∂≥Â§üÁöÑËßÜËßâÂèçÈ¶àÊó∂Èó¥

            } catch (error) {
                showAlert('Ê®°ÊùøÊñá‰ª∂Ê†ºÂºèÈîôËØØÔºö' + error.message, 'danger');
            }
        };

        reader.readAsText(file);
    };

    input.click();
}

// Ê∏ÖÈô§ÊâÄÊúâÂ≠¶ÁîüÊï∞ÊçÆ
function clearAllStudents() {
    if (studentsData.length === 0) {
        alert('ÂΩìÂâçÊ≤°ÊúâÂ≠¶ÁîüÊï∞ÊçÆÂèØÊ∏ÖÈô§ÔºÅ');
        return;
    }

    const confirmMessage = `Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâ ${studentsData.length} ÂêçÂ≠¶ÁîüÁöÑÊï∞ÊçÆÂêóÔºü\nÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºÅ`;

    if (confirm(confirmMessage)) {
        studentsData = [];
        localStorage.removeItem('studentsData');

        updateStudentsList();
        updateStatistics();
        clearForm();

        showAlert('ÊâÄÊúâÂ≠¶ÁîüÊï∞ÊçÆÂ∑≤Ê∏ÖÈô§ÔºÅ', 'warning');
    }
}

// ÊòæÁ§∫Â≠¶ÁîüÂàÜÁè≠Ê®°ÊÄÅÊ°Ü
function showClassifyModal() {
    if (studentsData.length === 0) {
        alert('ÂΩìÂâçÊ≤°ÊúâÂ≠¶ÁîüÊï∞ÊçÆÔºåËØ∑ÂÖàÂΩïÂÖ•Â≠¶Áîü‰ø°ÊÅØÔºÅ');
        return;
    }

    initClassifyModal();
    const modal = new bootstrap.Modal(document.getElementById('classifyModal'));
    modal.show();
}

// ÂàùÂßãÂåñÂàÜÁè≠Ê®°ÊÄÅÊ°Ü
function initClassifyModal() {
    // Ëé∑ÂèñÁé∞ÊúâÁöÑÁè≠Á∫ß‰ø°ÊÅØ
    const classes = getExistingClasses();

    // ÁîüÊàêÁè≠Á∫ßÂàó
    generateClassColumns(classes);
}

// Ëé∑ÂèñÁé∞ÊúâÁè≠Á∫ß‰ø°ÊÅØ
function getExistingClasses() {
    const classMap = new Map();

    studentsData.forEach(student => {
        const className = student.className || 'Êú™ÂàÜÁè≠';
        if (!classMap.has(className)) {
            classMap.set(className, []);
        }
        classMap.get(className).push(student);
    });

    return classMap;
}

// ÁîüÊàêÁè≠Á∫ßÂàó
function generateClassColumns(classMap) {
    const container = document.getElementById('class-columns');
    container.innerHTML = '';

    // Â¶ÇÊûúÊ≤°ÊúâÂàÜÁè≠‰ø°ÊÅØÔºåÂàõÂª∫ÈªòËÆ§ÁöÑÊú™ÂàÜÁè≠Âàó
    if (classMap.size === 0 || (classMap.size === 1 && classMap.has('Êú™ÂàÜÁè≠'))) {
        classMap.set('Êú™ÂàÜÁè≠', studentsData);
    }

    classMap.forEach((students, className) => {
        const columnDiv = document.createElement('div');
        columnDiv.className = 'col-md-4 mb-3';
        columnDiv.innerHTML = `
            <div class="card class-column" data-class="${className}">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">${className}</h6>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary btn-sm" onclick="renameClass('${className}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        ${className !== 'Êú™ÂàÜÁè≠' ? `
                        <button class="btn btn-outline-danger btn-sm" onclick="deleteClass('${className}')">
                            <i class="fas fa-trash"></i>
                        </button>
                        ` : ''}
                    </div>
                </div>
                <div class="card-body class-students" style="max-height: 200px; overflow-y: auto;" 
                     ondrop="dropStudent(event)" ondragover="allowDrop(event)">
                    ${generateStudentItems(students, className)}
                </div>
                <div class="card-footer text-muted small">
                    ÂÖ± ${students.length} ‰∫∫
                </div>
            </div>
        `;

        container.appendChild(columnDiv);
    });
}

// ÁîüÊàêÂ≠¶ÁîüÈ°πÁõÆ
function generateStudentItems(students, className) {
    return students.map(student => {
        const studentId = `${student.name}_${student.studentId || ''}`;
        return `
            <div class="student-classify-item" draggable="true" 
                 data-student-id="${studentId}" 
                 data-current-class="${className}"
                 ondragstart="dragStudent(event)">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="check_${studentId}">
                    <label class="form-check-label" for="check_${studentId}">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>${student.name}</strong>
                                ${student.studentId ? `<small class="text-muted">${student.studentId}</small>` : ''}
                            </div>
                            <span class="badge bg-info">${student.totalScore || 0}ÂàÜ</span>
                        </div>
                    </label>
                </div>
            </div>
        `;
    }).join('');
}

// ÂàõÂª∫Êñ∞Áè≠Á∫ß
function createNewClass() {
    const className = document.getElementById('new-class-name').value.trim();

    if (!className) {
        alert('ËØ∑ËæìÂÖ•Áè≠Á∫ßÂêçÁß∞ÔºÅ');
        return;
    }

    // Ê£ÄÊü•Áè≠Á∫ßÊòØÂê¶Â∑≤Â≠òÂú®
    const existingClasses = getExistingClasses();
    if (existingClasses.has(className)) {
        alert('Áè≠Á∫ßÂ∑≤Â≠òÂú®ÔºÅ');
        return;
    }

    // ÂàõÂª∫Á©∫Áè≠Á∫ß
    existingClasses.set(className, []);
    generateClassColumns(existingClasses);

    // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
    document.getElementById('new-class-name').value = '';

    showAlert(`Áè≠Á∫ß"${className}"ÂàõÂª∫ÊàêÂäüÔºÅ`, 'success');
}

// Ëá™Âä®ÂàÜÁè≠
function autoClassify(method) {
    if (studentsData.length === 0) {
        alert('Ê≤°ÊúâÂ≠¶ÁîüÊï∞ÊçÆÔºÅ');
        return;
    }

    const classCount = parseInt(prompt('ËØ∑ËæìÂÖ•Ë¶ÅÂàÜÊàêÂá†‰∏™Áè≠Á∫ßÔºö', '2'));

    if (!classCount || classCount < 1 || classCount > studentsData.length) {
        alert('Áè≠Á∫ßÊï∞Èáè‰∏çÊ≠£Á°ÆÔºÅ');
        return;
    }

    let sortedStudents = [...studentsData];

    // Ê†πÊçÆÊñπÊ≥ïÊéíÂ∫è
    switch (method) {
        case 'score':
            sortedStudents.sort((a, b) => (b.totalScore || 0) - (a.totalScore || 0));
            break;
        case 'name':
            sortedStudents.sort((a, b) => a.name.localeCompare(b.name, 'zh-CN'));
            break;
        case 'random':
            // Fisher-Yates Ê¥óÁâåÁÆóÊ≥ï
            for (let i = sortedStudents.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [sortedStudents[i], sortedStudents[j]] = [sortedStudents[j], sortedStudents[i]];
            }
            break;
    }

    // ÂàÜÈÖçÂà∞Áè≠Á∫ß
    const studentsPerClass = Math.ceil(sortedStudents.length / classCount);

    sortedStudents.forEach((student, index) => {
        const classIndex = Math.floor(index / studentsPerClass) + 1;
        student.className = `Áè≠Á∫ß${classIndex}`;
    });

    // ÈáçÊñ∞ÁîüÊàêÂàÜÁè≠ÁïåÈù¢
    const newClasses = getExistingClasses();
    generateClassColumns(newClasses);

    const methodNames = {
        'score': 'ÊàêÁª©',
        'name': 'ÂßìÂêç',
        'random': 'ÈöèÊú∫'
    };

    showAlert(`Êåâ${methodNames[method]}Ëá™Âä®ÂàÜÁè≠ÂÆåÊàêÔºÅ`, 'success');
}

// ÊãñÊãΩÁõ∏ÂÖ≥ÂáΩÊï∞
function dragStudent(event) {
    event.dataTransfer.setData("text/plain", event.target.dataset.studentId);
    event.dataTransfer.setData("source-class", event.target.dataset.currentClass);
}

function allowDrop(event) {
    event.preventDefault();
}

function dropStudent(event) {
    event.preventDefault();
    const studentId = event.dataTransfer.getData("text/plain");
    const sourceClass = event.dataTransfer.getData("source-class");
    const targetClass = event.currentTarget.closest('.class-column').dataset.class;

    if (sourceClass === targetClass) return;

    moveStudentToClass(studentId, sourceClass, targetClass);
}

// ÁßªÂä®Â≠¶ÁîüÂà∞ÊåáÂÆöÁè≠Á∫ß
function moveStudentToClass(studentId, sourceClass, targetClass) {
    const [name, id] = studentId.split('_');

    const student = studentsData.find(s => s.name === name && (s.studentId || '') === id);

    if (student) {
        student.className = targetClass;

        // ÈáçÊñ∞ÁîüÊàêÂàÜÁè≠ÁïåÈù¢
        const newClasses = getExistingClasses();
        generateClassColumns(newClasses);

        showAlert(`Â≠¶Áîü"${name}"Â∑≤ÁßªÂä®Âà∞"${targetClass}"`, 'success');
    }
}

// ÈÄâÊã©ÊâÄÊúâÂ≠¶Áîü
function selectAllStudents() {
    const checkboxes = document.querySelectorAll('#classifyModal .form-check-input');
    checkboxes.forEach(checkbox => checkbox.checked = true);
}

// Ê∏ÖÈô§ÈÄâÊã©
function clearSelection() {
    const checkboxes = document.querySelectorAll('#classifyModal .form-check-input');
    checkboxes.forEach(checkbox => checkbox.checked = false);
}

// ÁßªÂä®ÈÄâ‰∏≠ÁöÑÂ≠¶Áîü
function moveSelected() {
    const selectedStudents = [];
    const checkboxes = document.querySelectorAll('#classifyModal .form-check-input:checked');

    if (checkboxes.length === 0) {
        alert('ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÁßªÂä®ÁöÑÂ≠¶ÁîüÔºÅ');
        return;
    }

    checkboxes.forEach(checkbox => {
        const studentItem = checkbox.closest('.student-classify-item');
        selectedStudents.push({
            studentId: studentItem.dataset.studentId,
            currentClass: studentItem.dataset.currentClass
        });
    });

    // Ëé∑ÂèñÂèØÁî®ÁöÑÁè≠Á∫ß
    const classes = Array.from(getExistingClasses().keys());
    const targetClass = prompt('ËØ∑ËæìÂÖ•ÁõÆÊ†áÁè≠Á∫ßÂêçÁß∞Ôºö\nÂèØÁî®Áè≠Á∫ßÔºö' + classes.join(', '));

    if (!targetClass) return;

    if (!classes.includes(targetClass)) {
        // Â¶ÇÊûúÁè≠Á∫ß‰∏çÂ≠òÂú®ÔºåËØ¢ÈóÆÊòØÂê¶ÂàõÂª∫
        if (confirm(`Áè≠Á∫ß"${targetClass}"‰∏çÂ≠òÂú®ÔºåÊòØÂê¶ÂàõÂª∫Ôºü`)) {
            // ÂàõÂª∫Êñ∞Áè≠Á∫ß
        } else {
            return;
        }
    }

    // ÁßªÂä®ÈÄâ‰∏≠ÁöÑÂ≠¶Áîü
    let movedCount = 0;
    selectedStudents.forEach(item => {
        moveStudentToClass(item.studentId, item.currentClass, targetClass);
        movedCount++;
    });

    showAlert(`ÊàêÂäüÁßªÂä® ${movedCount} ÂêçÂ≠¶ÁîüÂà∞"${targetClass}"`, 'success');
}

// ÈáçÂëΩÂêçÁè≠Á∫ß
function renameClass(oldName) {
    const newName = prompt('ËØ∑ËæìÂÖ•Êñ∞ÁöÑÁè≠Á∫ßÂêçÁß∞Ôºö', oldName);

    if (!newName || newName === oldName) return;

    // Ê£ÄÊü•Êñ∞ÂêçÁß∞ÊòØÂê¶Â∑≤Â≠òÂú®
    const existingClasses = getExistingClasses();
    if (existingClasses.has(newName)) {
        alert('Áè≠Á∫ßÂêçÁß∞Â∑≤Â≠òÂú®ÔºÅ');
        return;
    }

    // Êõ¥Êñ∞ÊâÄÊúâÂ≠¶ÁîüÁöÑÁè≠Á∫ß‰ø°ÊÅØ
    studentsData.forEach(student => {
        if (student.className === oldName) {
            student.className = newName;
        }
    });

    // ÈáçÊñ∞ÁîüÊàêÂàÜÁè≠ÁïåÈù¢
    const newClasses = getExistingClasses();
    generateClassColumns(newClasses);

    showAlert(`Áè≠Á∫ß"${oldName}"Â∑≤ÈáçÂëΩÂêç‰∏∫"${newName}"`, 'success');
}

// Âà†Èô§Áè≠Á∫ß
function deleteClass(className) {
    if (className === 'Êú™ÂàÜÁè≠') {
        alert('‰∏çËÉΩÂà†Èô§"Êú™ÂàÜÁè≠"ÔºÅ');
        return;
    }

    if (!confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§Áè≠Á∫ß"${className}"ÂêóÔºü\nÁè≠Á∫ß‰∏≠ÁöÑÂ≠¶ÁîüÂ∞ÜÁßªÂà∞"Êú™ÂàÜÁè≠"„ÄÇ`)) {
        return;
    }

    // Â∞ÜÁè≠Á∫ß‰∏≠ÁöÑÂ≠¶ÁîüÁßªÂà∞Êú™ÂàÜÁè≠
    studentsData.forEach(student => {
        if (student.className === className) {
            student.className = 'Êú™ÂàÜÁè≠';
        }
    });

    // ÈáçÊñ∞ÁîüÊàêÂàÜÁè≠ÁïåÈù¢
    const newClasses = getExistingClasses();
    generateClassColumns(newClasses);

    showAlert(`Áè≠Á∫ß"${className}"Â∑≤Âà†Èô§ÔºÅ`, 'warning');
}

// ‰øùÂ≠òÂàÜÁè≠‰ø°ÊÅØ
function saveClassification() {
    // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
    localStorage.setItem('studentsData', JSON.stringify(studentsData));

    // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
    const modal = bootstrap.Modal.getInstance(document.getElementById('classifyModal'));
    modal.hide();

    // Êõ¥Êñ∞Â≠¶ÁîüÂàóË°®ÊòæÁ§∫
    updateStudentsList();

    showAlert('ÂàÜÁè≠‰ø°ÊÅØÂ∑≤‰øùÂ≠òÔºÅ', 'success');
}

// ÈÄâÊã©È¢òÂø´ÈÄüËµãÂàÜ
function setChoiceScore(questionIndex, type) {
    const question = currentExam.questions[questionIndex];

    for (let i = 0; i < question.count; i++) {
        const subQuestionId = `q${questionIndex}_${i}`;
        const scoreValue = type === 'full' ? question.score : 0;

        // ËÆæÁΩÆÂçïÈÄâÊåâÈíÆÁä∂ÊÄÅ
        const correctRadio = document.getElementById(`${subQuestionId}_correct`);
        const wrongRadio = document.getElementById(`${subQuestionId}_wrong`);
        const hiddenInput = document.getElementById(subQuestionId);

        if (type === 'full') {
            correctRadio.checked = true;
            wrongRadio.checked = false;
        } else {
            correctRadio.checked = false;
            wrongRadio.checked = true;
        }

        hiddenInput.value = scoreValue;
    }

    calculateTotal();
    showAlert(`${type === 'full' ? 'ÂÖ®ÂØπ' : 'ÂÖ®Èîô'}ËÆæÁΩÆÂÆåÊàêÔºÅ`, 'success');
}

// ËØ¶ÁªÜÈ¢òÁõÆÂø´ÈÄüËµãÂàÜ
function setDetailedScore(questionIndex, type) {
    const question = currentExam.questions[questionIndex];

    for (let i = 0; i < question.count; i++) {
        const subQuestionId = `q${questionIndex}_${i}`;
        const input = document.getElementById(subQuestionId);

        let scoreValue;
        switch (type) {
            case 'full':
                scoreValue = question.score;
                break;
            case 'good':
                scoreValue = Math.round(question.score * 0.8 * 2) / 2; // 80%ÂàÜÊï∞Ôºå‰øùÁïô0.5ÁöÑÂÄçÊï∞
                break;
            case 'zero':
                scoreValue = 0;
                break;
        }

        input.value = scoreValue;

        // Ê∏ÖÁ©∫ÂàÜÊ≠•ËØÑÂàÜ
        const breakdownContainer = document.getElementById(`breakdown_q${questionIndex}_${i}`);
        if (breakdownContainer) {
            const breakdownInputs = breakdownContainer.querySelectorAll('.breakdown-input');
            breakdownInputs.forEach(input => input.value = '');
        }
    }

    calculateTotal();

    const typeNames = {
        'full': 'Êª°ÂàÜ',
        'good': 'ËâØÂ•Ω',
        'zero': 'Èõ∂ÂàÜ'
    };
    showAlert(`${typeNames[type]}ËÆæÁΩÆÂÆåÊàêÔºÅ`, 'success');
}

// ÊôÆÈÄöÈ¢òÁõÆÂø´ÈÄüËµãÂàÜ
function setNormalScore(questionIndex, type) {
    const question = currentExam.questions[questionIndex];

    for (let i = 0; i < question.count; i++) {
        const subQuestionId = `q${questionIndex}_${i}`;
        const input = document.getElementById(subQuestionId);
        const scoreValue = type === 'full' ? question.score : 0;

        input.value = scoreValue;
    }

    calculateTotal();
    showAlert(`${type === 'full' ? 'Êª°ÂàÜ' : 'Èõ∂ÂàÜ'}ËÆæÁΩÆÂÆåÊàêÔºÅ`, 'success');
}

// Êõ¥Êñ∞ËØ¶ÁªÜÈ¢òÁõÆÁöÑÊÄªÂàÜ
function updateDetailedTotal(questionIndex, subIndex) {
    const breakdownContainer = document.getElementById(`breakdown_q${questionIndex}_${subIndex}`);
    const mainInput = document.getElementById(`q${questionIndex}_${subIndex}`);

    if (!breakdownContainer || !mainInput) return;

    const breakdownInputs = breakdownContainer.querySelectorAll('.breakdown-input');
    let total = 0;

    breakdownInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        total += value;
    });

    // Á°Æ‰øù‰∏çË∂ÖËøáÊúÄÂ§ßÂàÜÊï∞
    const maxScore = parseFloat(mainInput.getAttribute('max')) || 0;
    total = Math.min(total, maxScore);

    mainInput.value = total.toFixed(1);
    calculateTotal();
}

// ÈáçÂÜôËÆ°ÁÆóÊÄªÂàÜÂáΩÊï∞‰ª•ÊîØÊåÅÈÄâÊã©È¢ò
function calculateTotal() {
    if (!currentExam) return;

    let total = 0;

    // Â§ÑÁêÜÈÄâÊã©È¢ò
    document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
        total += parseFloat(radio.value) || 0;
    });

    // Â§ÑÁêÜÂÖ∂‰ªñÁ±ªÂûãÈ¢òÁõÆ
    document.querySelectorAll('.score-input').forEach(input => {
        // Ë∑≥ËøáÈÄâÊã©È¢òÁöÑÈöêËóèËæìÂÖ•Ê°Ü
        if (input.type === 'hidden') return;

        const value = parseFloat(input.value) || 0;
        total += value;
    });

    document.getElementById('current-total').textContent = total.toFixed(1);
}

// ÈáçÂÜôÊî∂ÈõÜÊàêÁª©Êï∞ÊçÆÁöÑÂáΩÊï∞
function collectScoreData() {
    const scores = {};

    currentExam.questions.forEach((question, qIndex) => {
        scores[`q${qIndex}`] = [];

        for (let i = 0; i < question.count; i++) {
            let score = 0;

            if (question.type === 'choice') {
                // ÈÄâÊã©È¢òÔºö‰ªéÂçïÈÄâÊåâÈíÆËé∑ÂèñÂàÜÊï∞
                const checkedRadio = document.querySelector(`input[name="q${qIndex}_${i}"]:checked`);
                score = checkedRadio ? parseFloat(checkedRadio.value) || 0 : 0;
            } else {
                // ÂÖ∂‰ªñÈ¢òÂûãÔºö‰ªéËæìÂÖ•Ê°ÜËé∑ÂèñÂàÜÊï∞
                const input = document.getElementById(`q${qIndex}_${i}`);
                score = input ? parseFloat(input.value) || 0 : 0;
            }

            scores[`q${qIndex}`].push(score);
        }
    });

    return scores;
}

// === Ë∂ÖÁé∞‰ª£ÂåñÂ¢ûÂº∫ÂäüËÉΩ ===

// Áé∞‰ª£ÂåñÂä†ËΩΩË¶ÜÁõñÂ±Ç
function showLoadingOverlay() {
    const overlay = document.createElement('div');
    overlay.id = 'modern-loading-overlay';
    overlay.className = 'modern-loading-overlay';
    overlay.innerHTML = `
        <div class="loading-content">
            <div class="loading-logo">
                <div class="logo-icon">
                    <i class="fas fa-graduation-cap"></i>
                </div>
                <h2>ZenInk</h2>
                <p>Êô∫ËÉΩÈòÖÂç∑Á≥ªÁªü</p>
            </div>
            <div class="loading-progress">
                <div class="progress-bar" id="loading-progress-bar"></div>
            </div>
            <div class="loading-text" id="loading-text">Ê≠£Âú®ÂàùÂßãÂåñÁ≥ªÁªü...</div>
        </div>
    `;

    document.body.appendChild(overlay);

    // Ê®°ÊãüÂä†ËΩΩËøõÂ∫¶
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 100) progress = 100;

        const progressBar = document.getElementById('loading-progress-bar');
        const loadingText = document.getElementById('loading-text');

        if (progressBar) progressBar.style.width = progress + '%';

        if (loadingText) {
            const messages = [
                'Ê≠£Âú®ÂàùÂßãÂåñÁ≥ªÁªü...',
                'Âä†ËΩΩÁî®Êà∑ÁïåÈù¢...',
                'ËøûÊé•Êï∞ÊçÆÂ≠òÂÇ®...',
                '‰ºòÂåñÊÄßËÉΩ...',
                'ÂáÜÂ§áÂ∞±Áª™...'
            ];
            loadingText.textContent = messages[Math.floor(progress / 20)] || 'ÂáÜÂ§áÂ∞±Áª™...';
        }

        if (progress >= 100) {
            clearInterval(interval);
        }
    }, 100);
}

function hideLoadingOverlay() {
    // ÈöêËóèÈ°µÈù¢Âä†ËΩΩÂô®
    const pageLoader = document.getElementById('page-loader');
    if (pageLoader) {
        pageLoader.classList.add('hidden');
        document.body.style.overflow = '';
    }

    // ÈöêËóèÁé∞‰ª£ÂåñÂä†ËΩΩÈÅÆÁΩ©
    const overlay = document.getElementById('modern-loading-overlay');
    if (overlay) {
        overlay.classList.add('fade-out');
        setTimeout(() => {
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
        }, 500);
    }
}

// Ë∂ÖÁé∞‰ª£ÂåñÊåâÈíÆÁÇπÂáªÊïàÊûú
function addModernClickEffect(button) {
    const rect = button.getBoundingClientRect();
    const ripple = document.createElement('span');
    ripple.className = 'modern-ripple';

    const size = Math.max(rect.width, rect.height);
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = (event.clientX - rect.left - size / 2) + 'px';
    ripple.style.top = (event.clientY - rect.top - size / 2) + 'px';

    button.appendChild(ripple);

    // Ê∑ªÂä†ÊåâÈíÆÂä®ÁîªÁ±ª
    button.classList.add('button-clicked');

    setTimeout(() => {
        if (ripple.parentNode) {
            ripple.parentNode.removeChild(ripple);
        }
        button.classList.remove('button-clicked');
    }, 600);
}

// Áé∞‰ª£ÂåñËæìÂÖ•Ê°ÜÁÑ¶ÁÇπÊïàÊûú
function addInputFocusEffect(input) {
    // ÂàõÂª∫ÁÑ¶ÁÇπÊåáÁ§∫Âô®
    const indicator = document.createElement('div');
    indicator.className = 'input-focus-indicator';

    // Â¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÊ∑ªÂä†
    if (!input.parentElement.querySelector('.input-focus-indicator')) {
        input.parentElement.appendChild(indicator);

        // Âä®ÁîªÊïàÊûú
        setTimeout(() => {
            indicator.classList.add('active');
        }, 10);

        // Â§±ÁÑ¶Êó∂ÁßªÈô§
        input.addEventListener('blur', function () {
            indicator.classList.remove('active');
            setTimeout(() => {
                if (indicator.parentNode) {
                    indicator.parentNode.removeChild(indicator);
                }
            }, 300);
        }, { once: true });
    }
}

// ËæìÂÖ•È™åËØÅËßÜËßâÂèçÈ¶à
function validateInput(input) {
    const value = input.value.trim();
    const parent = input.parentElement;

    // ÁßªÈô§‰πãÂâçÁöÑÈ™åËØÅÁ±ª
    parent.classList.remove('input-valid', 'input-invalid');

    if (input.hasAttribute('required')) {
        if (value) {
            parent.classList.add('input-valid');
            addValidationIcon(parent, 'check', 'success');
        } else {
            parent.classList.add('input-invalid');
            addValidationIcon(parent, 'times', 'error');
        }
    } else if (value) {
        parent.classList.add('input-valid');
        addValidationIcon(parent, 'check', 'success');
    }
}

function addValidationIcon(parent, icon, type) {
    // ÁßªÈô§Áé∞ÊúâÂõæÊ†á
    const existingIcon = parent.querySelector('.validation-icon');
    if (existingIcon) {
        existingIcon.remove();
    }

    // Ê∑ªÂä†Êñ∞ÂõæÊ†á
    const iconElement = document.createElement('i');
    iconElement.className = `fas fa-${icon} validation-icon validation-${type}`;
    parent.appendChild(iconElement);

    // Âä®ÁîªÊïàÊûú
    setTimeout(() => iconElement.classList.add('show'), 10);
}

// ÂØºËà™Ê†èÁé∞‰ª£ÂåñÊïàÊûú
function initializeNavbarEffects() {
    const navbar = document.querySelector('.navbar');
    if (!navbar) return;

    let lastScrollY = window.scrollY;

    window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;

        if (currentScrollY > 50) {
            navbar.classList.add('navbar-scrolled');
        } else {
            navbar.classList.remove('navbar-scrolled');
        }

        // ÊªöÂä®ÊñπÂêëÊ£ÄÊµã
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
            navbar.classList.add('navbar-hidden');
        } else {
            navbar.classList.remove('navbar-hidden');
        }

        lastScrollY = currentScrollY;
    });
}

// Âç°ÁâáÊÇ¨ÊµÆÊïàÊûú
function initializeCardEffects() {
    const cards = document.querySelectorAll('.card');

    cards.forEach(card => {
        card.addEventListener('mouseenter', function () {
            this.classList.add('card-elevated');

            // Ê∑ªÂä†ÂÖâÊôïÊïàÊûú
            const glow = document.createElement('div');
            glow.className = 'card-glow';
            this.appendChild(glow);
        });

        card.addEventListener('mouseleave', function () {
            this.classList.remove('card-elevated');

            // ÁßªÈô§ÂÖâÊôïÊïàÊûú
            const glow = this.querySelector('.card-glow');
            if (glow) {
                glow.remove();
            }
        });

        // Èº†Ê†áÁßªÂä®ËßÜÂ∑ÆÊïàÊûú
        card.addEventListener('mousemove', function (e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            const centerX = rect.width / 2;
            const centerY = rect.height / 2;

            const rotateX = (y - centerY) / 10;
            const rotateY = (centerX - x) / 10;

            this.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(10px)`;
        });

        card.addEventListener('mouseleave', function () {
            this.style.transform = '';
        });
    });
}

// Ëá™Âä®‰øùÂ≠òÁ≥ªÁªü
function initializeAutoSave() {
    let saveTimeout;
    const saveDelay = 2000; // 2ÁßíÂª∂Ëøü‰øùÂ≠ò

    // ÁõëÂê¨Ë°®ÂçïÂèòÂåñ
    document.addEventListener('input', function (e) {
        if (e.target.matches('.form-control, .form-select')) {
            clearTimeout(saveTimeout);

            // ÊòæÁ§∫‰øùÂ≠òÊåáÁ§∫Âô®
            showSaveIndicator('saving');

            saveTimeout = setTimeout(() => {
                autoSaveData();
                showSaveIndicator('saved');
            }, saveDelay);
        }
    });
}

function autoSaveData() {
    try {
        // ‰øùÂ≠òÂΩìÂâçË°®ÂçïÊï∞ÊçÆ
        const formData = {
            subject: document.getElementById('subject')?.value || '',
            examDate: document.getElementById('exam-date')?.value || '',
            totalScore: document.getElementById('total-score')?.value || '',
            passingScore: document.getElementById('passing-score')?.value || '',
            questions: getQuestionsConfig(),
            timestamp: new Date().toISOString()
        };

        localStorage.setItem('zenink-autosave', JSON.stringify(formData));
        console.log('Êï∞ÊçÆÂ∑≤Ëá™Âä®‰øùÂ≠ò');

    } catch (error) {
        console.error('Ëá™Âä®‰øùÂ≠òÂ§±Ë¥•:', error);
        showSaveIndicator('error');
    }
}

function showSaveIndicator(status) {
    let indicator = document.getElementById('save-indicator');

    if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'save-indicator';
        indicator.className = 'save-indicator';
        document.body.appendChild(indicator);
    }

    const icons = {
        saving: 'fa-spinner fa-spin',
        saved: 'fa-check',
        error: 'fa-exclamation-triangle'
    };

    const messages = {
        saving: 'Ê≠£Âú®‰øùÂ≠ò...',
        saved: 'Â∑≤‰øùÂ≠ò',
        error: '‰øùÂ≠òÂ§±Ë¥•'
    };

    const colors = {
        saving: '#2563eb',
        saved: '#10b981',
        error: '#ef4444'
    };

    indicator.innerHTML = `
        <i class="fas ${icons[status]}"></i>
        <span>${messages[status]}</span>
    `;

    indicator.style.backgroundColor = colors[status];
    indicator.classList.add('show');

    if (status !== 'saving') {
        setTimeout(() => {
            indicator.classList.remove('show');
        }, 2000);
    }
}

// Âø´Êç∑ÈîÆÁ≥ªÁªü
function initializeKeyboardShortcuts() {
    document.addEventListener('keydown', function (e) {
        // Ctrl+S ‰øùÂ≠ò
        if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            saveCurrentData();
            showNotification('Êï∞ÊçÆÂ∑≤‰øùÂ≠ò', 'success');
        }

        // Ctrl+N Êñ∞Âª∫
        if (e.ctrlKey && e.key === 'n') {
            e.preventDefault();
            showSection('exam-config');
            clearExamForm();
        }

        // Ctrl+E ÂØºÂá∫
        if (e.ctrlKey && e.key === 'e') {
            e.preventDefault();
            exportScores();
        }

        // F1 Â∏ÆÂä©
        if (e.key === 'F1') {
            e.preventDefault();
            showHelp();
        }

        // Esc ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal.show');
            modals.forEach(modal => {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) bsModal.hide();
            });
        }
    });
}

// ÈÄöÁü•Á≥ªÁªü
function initializeNotificationSystem() {
    // ÂàõÂª∫ÈÄöÁü•ÂÆπÂô®
    if (!document.getElementById('notifications-container')) {
        const container = document.createElement('div');
        container.id = 'notifications-container';
        container.className = 'notifications-container';
        document.body.appendChild(container);
    }
}

function showNotification(message, type = 'info', duration = 3000) {
    const container = document.getElementById('notifications-container');
    if (!container) return;

    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;

    const icons = {
        success: 'fa-check-circle',
        error: 'fa-exclamation-circle',
        warning: 'fa-exclamation-triangle',
        info: 'fa-info-circle'
    };

    notification.innerHTML = `
        <div class="notification-icon">
            <i class="fas ${icons[type] || icons.info}"></i>
        </div>
        <div class="notification-content">
            <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close" onclick="this.parentElement.remove()">
            <i class="fas fa-times"></i>
        </button>
    `;

    container.appendChild(notification);

    // ÊòæÁ§∫Âä®Áîª
    setTimeout(() => notification.classList.add('show'), 10);

    // Ëá™Âä®ÈöêËóè
    if (duration > 0) {
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.parentElement.removeChild(notification);
                }
            }, 300);
        }, duration);
    }
}

// ‰∏ªÈ¢òÊ£ÄÊµã
function initializeThemeDetection() {
    // Ê£ÄÊµãÁ≥ªÁªü‰∏ªÈ¢òÂÅèÂ•Ω
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

    function updateTheme(e) {
        if (e.matches) {
            document.documentElement.setAttribute('data-theme', 'dark');
        } else {
            document.documentElement.setAttribute('data-theme', 'light');
        }

        // Êõ¥Êñ∞ÂõæË°®‰∏ªÈ¢ò
        updateChartsTheme(e.matches ? 'dark' : 'light');
    }

    // ÂàùÂßãÊ£ÄÊµã
    updateTheme(mediaQuery);

    // ÁõëÂê¨ÂèòÂåñ
    mediaQuery.addListener(updateTheme);
}

function toggleTheme() {
    const current = document.documentElement.getAttribute('data-theme');
    const newTheme = current === 'dark' ? 'light' : 'dark';

    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('zenink-theme', newTheme);

    // Ê∑ªÂä†ÂàáÊç¢Âä®Áîª
    document.body.classList.add('theme-transition');
    setTimeout(() => {
        document.body.classList.remove('theme-transition');
    }, 300);

    showNotification(`Â∑≤ÂàáÊç¢Âà∞${newTheme === 'dark' ? 'Ê∑±Ëâ≤' : 'ÊµÖËâ≤'}‰∏ªÈ¢ò`, 'success');

    // Êõ¥Êñ∞ÂõæË°®‰∏ªÈ¢ò
    updateChartsTheme(newTheme);
}

// ÊÄßËÉΩÁõëÊéß
function initializePerformanceMonitoring() {
    // ÁõëÊéßÈ°µÈù¢Âä†ËΩΩÊÄßËÉΩ
    window.addEventListener('load', function () {
        setTimeout(() => {
            const perfData = performance.getEntriesByType('navigation')[0];
            const loadTime = perfData.loadEventEnd - perfData.loadEventStart;

            console.log(`È°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåËÄóÊó∂: ${loadTime.toFixed(2)}ms`);

            // Â¶ÇÊûúÂä†ËΩΩÊó∂Èó¥ËøáÈïøÔºåÊòæÁ§∫ÊèêÁ§∫
            if (loadTime > 3000) {
                showNotification('È°µÈù¢Âä†ËΩΩËæÉÊÖ¢ÔºåÂª∫ËÆÆÊ£ÄÊü•ÁΩëÁªúËøûÊé•', 'warning');
            }
        }, 100);
    });

    // ÁõëÊéßÂÜÖÂ≠ò‰ΩøÁî®
    if ('memory' in performance) {
        setInterval(() => {
            const memory = performance.memory;
            const usedPercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;

            if (usedPercent > 90) {
                console.warn('ÂÜÖÂ≠ò‰ΩøÁî®ÁéáËøáÈ´ò:', usedPercent.toFixed(2) + '%');
                showNotification('Á≥ªÁªüÂÜÖÂ≠ò‰ΩøÁî®ÁéáËæÉÈ´òÔºåÂª∫ËÆÆÂà∑Êñ∞È°µÈù¢', 'warning');
            }
        }, 30000); // ÊØè30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
    }
}

// ÂõæË°®‰∏ªÈ¢òÊõ¥Êñ∞
function updateChartsTheme(theme) {
    // Â¶ÇÊûúÊúâÂõæË°®ÂÆû‰æãÔºåÊõ¥Êñ∞ÂÖ∂‰∏ªÈ¢ò
    if (window.examChart) {
        const isDark = theme === 'dark';
        const textColor = isDark ? '#f8fafc' : '#0f172a';
        const gridColor = isDark ? '#334155' : '#e2e8f0';

        window.examChart.options.scales.y.ticks.color = textColor;
        window.examChart.options.scales.x.ticks.color = textColor;
        window.examChart.options.scales.y.grid.color = gridColor;
        window.examChart.options.scales.x.grid.color = gridColor;
        window.examChart.options.plugins.legend.labels.color = textColor;

        window.examChart.update();
    }
}

// Ê∏ÖÈô§Ë°®Âçï
function clearExamForm() {
    const form = document.getElementById('exam-form');
    if (form) {
        form.reset();

        // Ê∏ÖÈô§Âä®ÊÄÅÁîüÊàêÁöÑÈ¢òÁõÆ
        const questionsContainer = document.getElementById('questions-container');
        if (questionsContainer) {
            questionsContainer.innerHTML = '';
            questionCount = 0;
        }

        // ÈáçÁΩÆËøõÂ∫¶
        updateConfigProgress();

        showNotification('Ë°®ÂçïÂ∑≤Ê∏ÖÁ©∫', 'info');
    }
}

// ‰øùÂ≠òÂΩìÂâçÊï∞ÊçÆ
function saveCurrentData() {
    try {
        const currentSection = document.querySelector('.section.active')?.id;

        if (currentSection === 'exam-config') {
            generateExam();
        } else if (currentSection === 'scoring') {
            saveScore();
        }

    } catch (error) {
        console.error('‰øùÂ≠òÂ§±Ë¥•:', error);
        showNotification('‰øùÂ≠òÂ§±Ë¥•: ' + error.message, 'error');
    }
}

// ÊòæÁ§∫Â∏ÆÂä©
function showHelp() {
    window.open('help.html', '_blank');
}

// Áé∞‰ª£ÂåñËäÇÊµÅÂáΩÊï∞
function modernThrottle(func, limit) {
    let inThrottle;
    return function () {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    }
}

// Áé∞‰ª£ÂåñÈò≤ÊäñÂáΩÊï∞
function modernDebounce(func, wait, immediate) {
    let timeout;
    return function () {
        const context = this, args = arguments;
        const later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}

// Áé∞‰ª£ÂåñÊï∞ÊçÆÈ™åËØÅ
function validateFormData(data) {
    const errors = [];

    if (!data.subject || data.subject.trim().length < 2) {
        errors.push('ÁßëÁõÆÂêçÁß∞Ëá≥Â∞ëÈúÄË¶Å2‰∏™Â≠óÁ¨¶');
    }

    if (!data.examDate) {
        errors.push('ËØ∑ÈÄâÊã©ËÄÉËØïÊó•Êúü');
    }

    if (!data.totalScore || data.totalScore <= 0) {
        errors.push('ÊÄªÂàÜÂøÖÈ°ªÂ§ß‰∫é0');
    }

    if (!data.questions || data.questions.length === 0) {
        errors.push('Ëá≥Â∞ëÈúÄË¶ÅÊ∑ªÂä†‰∏ÄÈÅìÈ¢òÁõÆ');
    }

    return {
        isValid: errors.length === 0,
        errors: errors
    };
}

// Áé∞‰ª£ÂåñÈîôËØØÂ§ÑÁêÜ
function handleError(error, context = 'Êìç‰Ωú') {
    console.error(`${context}Â§±Ë¥•:`, error);

    const userMessage = error.message || 'ÂèëÁîüÊú™Áü•ÈîôËØØ';
    showNotification(`${context}Â§±Ë¥•: ${userMessage}`, 'error');

    // ÂèëÈÄÅÈîôËØØÊä•ÂëäÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    if (window.errorReporting) {
        window.errorReporting.report(error, context);
    }
}

// Áé∞‰ª£ÂåñÊàêÂäüÂ§ÑÁêÜ
function handleSuccess(message, data = null) {
    showNotification(message, 'success');

    if (data) {
        console.log('Êìç‰ΩúÊàêÂäü:', data);
    }

    // Ëß¶ÂèëÊàêÂäü‰∫ã‰ª∂
    document.dispatchEvent(new CustomEvent('zenink:success', {
        detail: { message, data }
    }));
}

// Áé∞‰ª£ÂåñÊï∞ÊçÆÊ†ºÂºèÂåñ
function formatModernData(data) {
    return {
        ...data,
        _id: generateId(),
        _timestamp: new Date().toISOString(),
        _version: '2.0',
        _checksum: calculateChecksum(data)
    };
}

function calculateChecksum(data) {
    // ÁÆÄÂçïÁöÑÊ†°È™åÂíåËÆ°ÁÆó
    const str = JSON.stringify(data);
    let hash = 0;

    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // ËΩ¨Êç¢‰∏∫32‰ΩçÊï¥Êï∞
    }

    return Math.abs(hash).toString(16);
}

console.log('üöÄ ZenInk Ë∂ÖÁé∞‰ª£ÂåñÂäüËÉΩÊ®°ÂùóÂä†ËΩΩÂÆåÊàê');

// ==================== ÊâìÂç∞Êä•Ë°®ÂäüËÉΩ ====================

let currentZoom = 1;

// ÊòæÁ§∫ÊâìÂç∞Êä•Ë°®Ê®°ÊÄÅÊ°Ü
function showPrintReport() {
    // Ê£ÄÊü•ÊòØÂê¶ÊúâÈ¢òÁõÆÈÖçÁΩÆ
    const questionsContainer = document.getElementById('questions-container');
    if (!questionsContainer.children.length) {
        showNotification('ËØ∑ÂÖàÊ∑ªÂä†È¢òÁõÆÈÖçÁΩÆ', 'warning');
        return;
    }

    const modal = new bootstrap.Modal(document.getElementById('printReportModal'));
    modal.show();

    // ÈªòËÆ§ÁîüÊàêÁ≠îÈ¢òÂç°È¢ÑËßà
    setTimeout(() => {
        generateReportPreview();
    }, 300);
}

// Êõ¥Êñ∞Êä•Ë°®Á±ªÂûã
function updateReportType() {
    const reportType = document.getElementById('report-type').value;
    const answerSheetOptions = document.getElementById('answer-sheet-options');
    const layoutOptions = document.getElementById('layout-options');

    // Ê†πÊçÆÊä•Ë°®Á±ªÂûãÊòæÁ§∫/ÈöêËóèÁõ∏ÂÖ≥ÈÄâÈ°π
    if (reportType === 'answer-sheet') {
        answerSheetOptions.style.display = 'block';
        layoutOptions.style.display = 'block';
    } else {
        answerSheetOptions.style.display = 'none';
        layoutOptions.style.display = reportType === 'score-sheet' ? 'block' : 'none';
    }

    generateReportPreview();
}

// ÁîüÊàêÊä•Ë°®È¢ÑËßà
function generateReportPreview() {
    const reportType = document.getElementById('report-type').value;
    const previewContainer = document.getElementById('print-preview');

    let previewHTML = '';

    switch (reportType) {
        case 'answer-sheet':
            previewHTML = generateAnswerSheetPreview();
            break;
        case 'score-sheet':
            previewHTML = generateScoreSheetPreview();
            break;
        case 'question-analysis':
            previewHTML = generateQuestionAnalysisPreview();
            break;
        case 'class-summary':
            previewHTML = generateClassSummaryPreview();
            break;
    }

    previewContainer.innerHTML = previewHTML;

    // Â∫îÁî®Áº©Êîæ
    const pages = previewContainer.querySelectorAll('.print-page');
    pages.forEach(page => {
        page.style.transform = `scale(${currentZoom})`;
    });
}

// ÁîüÊàêÁ≠îÈ¢òÂç°È¢ÑËßà
function generateAnswerSheetPreview() {
    const subject = document.getElementById('subject').value || 'ÁßëÁõÆÂêçÁß∞';
    const examName = document.getElementById('exam-name').value || 'ËÄÉËØïÂêçÁß∞';
    const className = document.getElementById('class-name').value || 'Áè≠Á∫ßÂêçÁß∞';
    const includeHeader = document.getElementById('include-header').checked;
    const includeStudentInfo = document.getElementById('include-student-info').checked;
    const includeBarcode = document.getElementById('include-barcode').checked;
    const questionsPerRow = parseInt(document.getElementById('questions-per-row').value) || 5;

    // Êî∂ÈõÜÊâÄÊúâÈ¢òÁõÆ‰ø°ÊÅØ
    const questions = collectQuestionsData();

    let html = `
        <div class="print-page answer-sheet">
            ${includeHeader ? `
                <div class="sheet-header">
                    <h2 class="exam-title">${examName}</h2>
                    <div class="exam-info">
                        <span>ÁßëÁõÆÔºö${subject}</span>
                        <span>Áè≠Á∫ßÔºö${className}</span>
                        <span>Êª°ÂàÜÔºö${calculateTotalScore()}ÂàÜ</span>
                    </div>
                </div>
            ` : ''}
            
            ${includeStudentInfo ? `
                <div class="student-info-section">
                    <div class="info-row">
                        <span>ÂßìÂêçÔºö___________________</span>
                        <span>Â≠¶Âè∑Ôºö___________________</span>
                        <span>ËÄÉÂè∑Ôºö___________________</span>
                    </div>
                    ${includeBarcode ? '<div class="barcode-area"><div class="barcode-placeholder">||||||||||||||||||||||||</div></div>' : ''}
                </div>
            ` : ''}
            
            <div class="answer-sections">
                ${generateAnswerSections(questions, questionsPerRow)}
            </div>
            
            <div class="sheet-footer">
                <div class="attention-note">
                    <strong>Ê≥®ÊÑè‰∫ãÈ°πÔºö</strong><br>
                    1. Á≠îÈ¢òÂâçËØ∑‰ªîÁªÜÈòÖËØªÂêÑÈ¢òË¶ÅÊ±ÇÔºåÂú®ËßÑÂÆöÁöÑÁ≠îÈ¢òÂå∫ÂüüÂÜÖ‰ΩúÁ≠î„ÄÇ<br>
                    2. ÈÄâÊã©È¢òËØ∑Áî®2BÈìÖÁ¨îÂ°´Ê∂ÇÔºåÂ°´Á©∫È¢òÂíåËß£Á≠îÈ¢òËØ∑Áî®ÈªëËâ≤Á≠æÂ≠óÁ¨î‰π¶ÂÜô„ÄÇ<br>
                    3. ‰øùÊåÅÁ≠îÈ¢òÂç°Ê∏ÖÊ¥ÅÔºå‰∏çË¶ÅÊäòÂè†„ÄÅÊ±°Êçü„ÄÇ
                </div>
            </div>
        </div>
    `;

    return html;
}

// ÁîüÊàêÁ≠îÈ¢òÂå∫Âüü
function generateAnswerSections(questions, questionsPerRow) {
    let html = '';
    let questionNum = 1;

    questions.forEach(question => {
        const { type, count, description, startNum } = question;

        html += `<div class="question-section">`;
        html += `<div class="section-title">${getQuestionTypeTitle(type)}Ôºà${description || ''}Ôºâ</div>`;

        if (type === 'choice' || type === 'multiple') {
            // ÈÄâÊã©È¢òÁ≠îÈ¢òÂå∫Âüü
            html += `<div class="choice-answer-area">`;
            for (let i = 0; i < count; i++) {
                if (i % questionsPerRow === 0) {
                    html += `<div class="choice-row">`;
                }

                const currentNum = startNum + i;
                html += `
                    <div class="choice-item">
                        <span class="question-num">${currentNum}</span>
                        <div class="choice-options">
                            <div class="choice-option"><span>A</span></div>
                            <div class="choice-option"><span>B</span></div>
                            <div class="choice-option"><span>C</span></div>
                            <div class="choice-option"><span>D</span></div>
                        </div>
                    </div>
                `;

                if ((i + 1) % questionsPerRow === 0 || i === count - 1) {
                    html += `</div>`;
                }
            }
            html += `</div>`;
        } else if (type === 'blank') {
            // Â°´Á©∫È¢òÁ≠îÈ¢òÂå∫Âüü
            html += `<div class="blank-answer-area">`;
            for (let i = 0; i < count; i++) {
                const currentNum = startNum + i;
                html += `
                    <div class="blank-item">
                        <span class="question-num">${currentNum}.</span>
                        <div class="blank-lines">
                            <div class="blank-line"></div>
                        </div>
                    </div>
                `;
            }
            html += `</div>`;
        } else {
            // Ëß£Á≠îÈ¢òÁ≠îÈ¢òÂå∫Âüü
            html += `<div class="essay-answer-area">`;
            for (let i = 0; i < count; i++) {
                const currentNum = startNum + i;
                html += `
                    <div class="essay-item">
                        <div class="essay-header">
                            <span class="question-num">${currentNum}.</span>
                            <span class="score-box">Ôºà${question.score}ÂàÜÔºâ</span>
                        </div>
                        <div class="essay-lines">
                            ${generateEssayLines(8)}
                        </div>
                    </div>
                `;
            }
            html += `</div>`;
        }

        html += `</div>`;
        questionNum += count;
    });

    return html;
}

// ÁîüÊàêËß£Á≠îÈ¢òÁ∫øÊù°
function generateEssayLines(lineCount) {
    let lines = '';
    for (let i = 0; i < lineCount; i++) {
        lines += '<div class="essay-line"></div>';
    }
    return lines;
}

// ÁîüÊàêÊàêÁª©ÁªüËÆ°Ë°®È¢ÑËßà
function generateScoreSheetPreview() {
    const subject = document.getElementById('subject').value || 'ÁßëÁõÆÂêçÁß∞';
    const examName = document.getElementById('exam-name').value || 'ËÄÉËØïÂêçÁß∞';
    const className = document.getElementById('class-name').value || 'Áè≠Á∫ßÂêçÁß∞';
    const questions = collectQuestionsData();

    return `
        <div class="print-page score-sheet">
            <div class="sheet-header">
                <h2>${examName} - ${subject}ÊàêÁª©ÁªüËÆ°Ë°®</h2>
                <div class="class-info">Áè≠Á∫ßÔºö${className}</div>
            </div>
            
            <table class="score-table">
                <thead>
                    <tr>
                        <th rowspan="2">Â∫èÂè∑</th>
                        <th rowspan="2">ÂßìÂêç</th>
                        <th rowspan="2">Â≠¶Âè∑</th>
                        ${questions.map((q, index) => `<th colspan="${q.count}">${getQuestionTypeTitle(q.type)}</th>`).join('')}
                        <th rowspan="2">ÊÄªÂàÜ</th>
                        <th rowspan="2">ÊéíÂêç</th>
                    </tr>
                    <tr>
                        ${questions.map(q => {
        let cells = '';
        for (let i = 0; i < q.count; i++) {
            cells += `<th>${q.startNum + i}</th>`;
        }
        return cells;
    }).join('')}
                    </tr>
                </thead>
                <tbody>
                    ${generateScoreTableRows(30)}
                </tbody>
            </table>
            
            <div class="score-statistics">
                <h4>ÊàêÁª©ÁªüËÆ°</h4>
                <div class="stats-grid">
                    <div class="stat-item">
                        <label>ÊúÄÈ´òÂàÜÔºö</label>
                        <span>___ÂàÜ</span>
                    </div>
                    <div class="stat-item">
                        <label>ÊúÄ‰ΩéÂàÜÔºö</label>
                        <span>___ÂàÜ</span>
                    </div>
                    <div class="stat-item">
                        <label>Âπ≥ÂùáÂàÜÔºö</label>
                        <span>___ÂàÜ</span>
                    </div>
                    <div class="stat-item">
                        <label>ÂèäÊ†ºÁéáÔºö</label>
                        <span>___%</span>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// ÁîüÊàêÊàêÁª©Ë°®Ë°å
function generateScoreTableRows(studentCount) {
    let rows = '';
    for (let i = 1; i <= studentCount; i++) {
        const questions = collectQuestionsData();
        const totalQuestions = questions.reduce((sum, q) => sum + q.count, 0);

        rows += `
            <tr>
                <td>${i}</td>
                <td>Â≠¶Áîü${i}</td>
                <td>2024${String(i).padStart(3, '0')}</td>
                ${Array(totalQuestions).fill('<td></td>').join('')}
                <td></td>
                <td></td>
            </tr>
        `;
    }
    return rows;
}

// ÁîüÊàêÈ¢òÁõÆÂàÜÊûêÊä•Ë°®È¢ÑËßà
function generateQuestionAnalysisPreview() {
    const questions = collectQuestionsData();

    return `
        <div class="print-page analysis-sheet">
            <div class="sheet-header">
                <h2>È¢òÁõÆÂàÜÊûêÊä•Ë°®</h2>
            </div>
            
            <div class="analysis-content">
                ${questions.map((question, index) => `
                    <div class="question-analysis">
                        <h4>${getQuestionTypeTitle(question.type)} (${question.startNum}-${question.startNum + question.count - 1}È¢ò)</h4>
                        <div class="analysis-stats">
                            <div class="stat-grid">
                                <div class="stat-item">
                                    <label>È¢òÁõÆÊï∞ÈáèÔºö</label>
                                    <span>${question.count}È¢ò</span>
                                </div>
                                <div class="stat-item">
                                    <label>ÂçïÈ¢òÂàÜÂÄºÔºö</label>
                                    <span>${question.score}ÂàÜ</span>
                                </div>
                                <div class="stat-item">
                                    <label>ÊÄªÂàÜÂÄºÔºö</label>
                                    <span>${question.count * question.score}ÂàÜ</span>
                                </div>
                                <div class="stat-item">
                                    <label>Ê≠£Á°ÆÁéáÔºö</label>
                                    <span>__%</span>
                                </div>
                            </div>
                        </div>
                        ${question.type === 'choice' || question.type === 'multiple' ? `
                            <div class="choice-analysis">
                                <h5>ÈÄâÈ°πÂàÜÊûê</h5>
                                <table class="choice-table">
                                    <thead>
                                        <tr>
                                            <th>È¢òÂè∑</th>
                                            <th>AÈÄâÈ°π</th>
                                            <th>BÈÄâÈ°π</th>
                                            <th>CÈÄâÈ°π</th>
                                            <th>DÈÄâÈ°π</th>
                                            <th>Ê≠£Á°ÆÁéá</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${Array(Math.min(question.count, 10)).fill(0).map((_, i) => `
                                            <tr>
                                                <td>${question.startNum + i}</td>
                                                <td>__%</td>
                                                <td>__%</td>
                                                <td>__%</td>
                                                <td>__%</td>
                                                <td>__%</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        ` : ''}
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

// ÁîüÊàêÁè≠Á∫ßÊ±áÊÄªÊä•Ë°®È¢ÑËßà
function generateClassSummaryPreview() {
    const subject = document.getElementById('subject').value || 'ÁßëÁõÆÂêçÁß∞';
    const examName = document.getElementById('exam-name').value || 'ËÄÉËØïÂêçÁß∞';
    const totalScore = calculateTotalScore();

    return `
        <div class="print-page summary-sheet">
            <div class="sheet-header">
                <h2>${examName} - ${subject}Áè≠Á∫ßÊ±áÊÄªÊä•Ë°®</h2>
            </div>
            
            <div class="summary-overview">
                <div class="overview-stats">
                    <div class="stat-card">
                        <h4>ÊÄª‰ΩìÊÉÖÂÜµ</h4>
                        <div class="stat-list">
                            <div class="stat-row">
                                <span>ËÄÉËØïÁßëÁõÆÔºö</span>
                                <span>${subject}</span>
                            </div>
                            <div class="stat-row">
                                <span>Êª°ÂàÜÂàÜÂÄºÔºö</span>
                                <span>${totalScore}ÂàÜ</span>
                            </div>
                            <div class="stat-row">
                                <span>ÂèÇËÄÉ‰∫∫Êï∞Ôºö</span>
                                <span>___‰∫∫</span>
                            </div>
                            <div class="stat-row">
                                <span>ÂÆûËÄÉ‰∫∫Êï∞Ôºö</span>
                                <span>___‰∫∫</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>ÊàêÁª©ÂàÜÂ∏É</h4>
                        <div class="score-distribution">
                            <div class="score-range">
                                <span>90-100ÂàÜÔºö</span>
                                <span>___‰∫∫ (____%)</span>
                            </div>
                            <div class="score-range">
                                <span>80-89ÂàÜÔºö</span>
                                <span>___‰∫∫ (____%)</span>
                            </div>
                            <div class="score-range">
                                <span>70-79ÂàÜÔºö</span>
                                <span>___‰∫∫ (____%)</span>
                            </div>
                            <div class="score-range">
                                <span>60-69ÂàÜÔºö</span>
                                <span>___‰∫∫ (____%)</span>
                            </div>
                            <div class="score-range">
                                <span>60ÂàÜ‰ª•‰∏ãÔºö</span>
                                <span>___‰∫∫ (____%)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="top-students">
                <h4>‰ºòÁßÄÂ≠¶Áîü</h4>
                <table class="top-table">
                    <thead>
                        <tr>
                            <th>ÊéíÂêç</th>
                            <th>ÂßìÂêç</th>
                            <th>Â≠¶Âè∑</th>
                            <th>ÂæóÂàÜ</th>
                            <th>ÂæóÂàÜÁéá</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${Array(10).fill(0).map((_, i) => `
                            <tr>
                                <td>${i + 1}</td>
                                <td>Â≠¶Áîü${i + 1}</td>
                                <td>2024${String(i + 1).padStart(3, '0')}</td>
                                <td>___ÂàÜ</td>
                                <td>____%</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;
}

// Êî∂ÈõÜÈ¢òÁõÆÊï∞ÊçÆ
function collectQuestionsData() {
    const questions = [];
    const questionCards = document.querySelectorAll('.question-card');

    questionCards.forEach(card => {
        const type = card.querySelector('.question-type').value;
        const count = parseInt(card.querySelector('.question-count').value) || 1;
        const score = parseFloat(card.querySelector('.question-score').value) || 0;
        const description = card.querySelector('.question-desc').value.trim();
        const startNum = parseInt(card.querySelector('.question-start').value) || 1;

        questions.push({
            type,
            count,
            score,
            description,
            startNum
        });
    });

    return questions;
}

// Ëé∑ÂèñÈ¢òÁõÆÁ±ªÂûãÊ†áÈ¢ò
function getQuestionTypeTitle(type) {
    const typeNames = {
        'choice': 'ÈÄâÊã©È¢ò',
        'multiple': 'Â§öÈÄâÈ¢ò',
        'blank': 'Â°´Á©∫È¢ò',
        'short': 'ÁÆÄÁ≠îÈ¢ò',
        'essay': 'Ëß£Á≠îÈ¢ò'
    };
    return typeNames[type] || 'È¢òÁõÆ';
}

// ËÆ°ÁÆóÊÄªÂàÜ
function calculateTotalScore() {
    const questions = collectQuestionsData();
    return questions.reduce((total, q) => total + (q.count * q.score), 0);
}

// Áº©ÊîæÂäüËÉΩ
function zoomReport(delta) {
    currentZoom = Math.max(0.3, Math.min(2, currentZoom + delta));
    document.getElementById('zoom-level').textContent = Math.round(currentZoom * 100) + '%';

    const pages = document.querySelectorAll('.print-page');
    pages.forEach(page => {
        page.style.transform = `scale(${currentZoom})`;
    });
}

function resetZoom() {
    currentZoom = 1;
    document.getElementById('zoom-level').textContent = '100%';

    const pages = document.querySelectorAll('.print-page');
    pages.forEach(page => {
        page.style.transform = 'scale(1)';
    });
}

// ÊâìÂç∞Êä•Ë°®
function printReport() {
    const printContent = document.getElementById('print-preview').innerHTML;
    const originalContent = document.body.innerHTML;

    // ÂàõÂª∫ÊâìÂç∞Ê†∑Âºè
    const printStyles = `
        <style>
            @media print {
                body { margin: 0; padding: 0; }
                .print-page { page-break-after: always; margin: 0; transform: none !important; }
                .print-page:last-child { page-break-after: auto; }
            }
        </style>
    `;

    document.body.innerHTML = printStyles + printContent;
    window.print();
    document.body.innerHTML = originalContent;

    // ÈáçÊñ∞ÂàùÂßãÂåñ
    location.reload();
}

// ÂØºÂá∫PDF (ÈúÄË¶ÅjsPDFÂ∫ì)
function downloadPDF() {
    showNotification('PDFÂØºÂá∫ÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
    // TODO: ÂÆûÁé∞PDFÂØºÂá∫ÂäüËÉΩ
}

// ÂØºÂá∫ÈÖçÁΩÆ
function exportConfig() {
    const config = {
        examInfo: {
            subject: document.getElementById('subject').value,
            examName: document.getElementById('exam-name').value,
            totalScore: document.getElementById('total-score').value,
            className: document.getElementById('class-name').value
        },
        questions: collectQuestionsData(),
        timestamp: new Date().toISOString()
    };

    const dataStr = JSON.stringify(config, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });

    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `exam_config_${config.examInfo.subject}_${new Date().getTime()}.json`;
    link.click();

    showNotification('ÈÖçÁΩÆÂ∑≤ÂØºÂá∫', 'success');
}

// Â°´ÂÖÖÊâÄÊúâÁ≠îÊ°à
function fillAllAnswers(answer) {
    const selects = document.querySelectorAll('.answer-select');
    selects.forEach(select => {
        select.value = answer;
    });
}

// ÈöèÊú∫Â°´ÂÖÖÊâÄÊúâÁ≠îÊ°à
function randomizeAllAnswers() {
    const options = ['A', 'B', 'C', 'D'];
    const selects = document.querySelectorAll('.answer-select');
    selects.forEach(select => {
        const randomIndex = Math.floor(Math.random() * options.length);
        select.value = options[randomIndex];
    });
}

// ‰øùÂ≠òËØ¶ÁªÜÁ≠îÊ°à
function saveDetailedAnswers() {
    const modal = document.querySelector('.modal.show');
    const questionCardId = modal.getAttribute('data-question-card');
    const questionCard = document.querySelector(`[data-question-id="${questionCardId}"]`);

    if (!questionCard) return;

    const selects = modal.querySelectorAll('.answer-select');
    const answers = Array.from(selects).map(select => select.value);

    // Â≠òÂÇ®Á≠îÊ°àÊï∞ÊçÆ
    questionCard.setAttribute('data-answers', JSON.stringify(answers));

    // Êõ¥Êñ∞È¢ÑËßà
    const answerPreview = questionCard.querySelector('.answer-preview small');
    const preview = answers.slice(0, 10).join(' ') + (answers.length > 10 ? '...' : '');
    answerPreview.textContent = `Á≠îÊ°àÈ¢ÑËßàÔºö${preview}`;

    // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
    const bsModal = bootstrap.Modal.getInstance(modal);
    bsModal.hide();

    showNotification(`Â∑≤‰øùÂ≠ò${answers.length}È¢òËØ¶ÁªÜÁ≠îÊ°à`, 'success');
}

// Âä†ËΩΩÊºîÁ§∫ÈÖçÁΩÆ
function loadDemoConfig() {
    // Â°´ÂÜôÂü∫Êú¨‰ø°ÊÅØ
    document.getElementById('subject').value = 'Êï∞Â≠¶';
    document.getElementById('exam-name').value = 'ÊúüÊú´ËÄÉËØï';
    document.getElementById('total-score').value = '100';
    document.getElementById('class-name').value = 'È´ò‰∏Ä(1)Áè≠';

    // Ê∏ÖÁ©∫Áé∞ÊúâÈ¢òÁõÆ
    document.getElementById('questions-container').innerHTML = '';
    questionCount = 0;

    // Ê∑ªÂä†ÊºîÁ§∫È¢òÁõÆ
    setTimeout(() => {
        // ÈÄâÊã©È¢ò
        addQuestion();
        const choiceCard = document.querySelector('.question-card:last-child');
        choiceCard.querySelector('.question-type').value = 'choice';
        choiceCard.querySelector('.question-count').value = '10';
        choiceCard.querySelector('.question-score').value = '3';
        choiceCard.querySelector('.question-desc').value = 'ÂçïÈ°πÈÄâÊã©È¢ò';
        choiceCard.querySelector('.question-start').value = '1';
        updateQuestionType(choiceCard.querySelector('.question-type'));
        updateQuestionPreview(choiceCard);

        // Â°´Á©∫È¢ò
        addQuestion();
        const blankCard = document.querySelector('.question-card:last-child');
        blankCard.querySelector('.question-type').value = 'blank';
        blankCard.querySelector('.question-count').value = '5';
        blankCard.querySelector('.question-score').value = '4';
        blankCard.querySelector('.question-desc').value = 'Â°´Á©∫È¢ò';
        blankCard.querySelector('.question-start').value = '11';
        updateQuestionType(blankCard.querySelector('.question-type'));
        updateQuestionPreview(blankCard);

        // Ëß£Á≠îÈ¢ò
        addQuestion();
        const essayCard = document.querySelector('.question-card:last-child');
        essayCard.querySelector('.question-type').value = 'essay';
        essayCard.querySelector('.question-count').value = '3';
        essayCard.querySelector('.question-score').value = '20';
        essayCard.querySelector('.question-desc').value = 'Ëß£Á≠îÈ¢ò';
        essayCard.querySelector('.question-start').value = '16';
        updateQuestionType(essayCard.querySelector('.question-type'));
        updateQuestionPreview(essayCard);

        updatePreview();
        showNotification('ÊºîÁ§∫ÈÖçÁΩÆÂ∑≤Âä†ËΩΩÔºÅÂåÖÂê´ÈÄâÊã©È¢ò„ÄÅÂ°´Á©∫È¢òÂíåËß£Á≠îÈ¢òÔºåÂèØ‰ª•ÊµãËØïÊäòÂè†ÂäüËÉΩÂíåÊâìÂç∞Êä•Ë°®', 'success');
    }, 100);
}

console.log('üìÑ ÊâìÂç∞Êä•Ë°®ÂäüËÉΩÊ®°ÂùóÂä†ËΩΩÂÆåÊàê');
